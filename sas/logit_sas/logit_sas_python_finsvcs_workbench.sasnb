[{"kind":1,"language":"markdown","value":"##### before executing code, copy financial_services.csv to data directory in workbench","outputs":[]},{"kind":2,"language":"sas","value":"data financial_services;\r\n    infile \"&WORKSPACE_PATH./data/financial_services.csv\" dsd firstobs=2;\r\n    input account_id performance_period event_indicator gender ever_missed_obligation at_current_job_1_year smoker uses_direct_deposit business_owner \r\n            homeowner marital_status num_dependents job_industry citizenship region years_at_residence age debt_to_income num_transactions credit_history_mos \r\n            credit_score amount net_worth id_important_activity $ id_direct_contact $ id_current_fs_relationship $ job_industry_char $ citizenship_char $\r\n            region_char $ gender_char $ smoker_char $ marital_status_char $ ssn;\r\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"data financial_services_prep;\r\n    infile \"&WORKSPACE_PATH./data/financial_services_prep.csv\" dsd firstobs=2;\r\n    input analytic_partition account_id\tevent_indicator\tgender ever_missed_obligation at_current_job_1_year smoker uses_direct_deposit business_owner homeowner\r\n            num_dependents marital_status job_industry citizenship region age amount credit_history_mos credit_score debt_to_income net_worth num_transactions years_at_residence;\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"##### charting","outputs":[]},{"kind":2,"language":"sas","value":"proc corr data=financial_services;\r\n    var event_indicator gender ever_missed_obligation at_current_job_1_year smoker uses_direct_deposit business_owner homeowner marital_status num_dependents job_industry citizenship region years_at_residence age debt_to_income num_transactions credit_history_mos credit_score amount net_worth;\r\nrun;","outputs":[{"items":[{"data":"[\n\t{\n\t\t\"line\": \"1    ods html5 style=Ignite;\",\n\t\t\"type\": \"source\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"NOTE: Writing HTML5 Body file: sashtml.htm\",\n\t\t\"type\": \"note\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"2    %let _SASPROGRAMFILE = %nrquote(%nrstr(c:\\\\Users\\\\chparr\\\\OneDrive - SAS\\\\git\\\\sas_viya\\\\sas\\\\workbench_demo.sasnb));\",\n\t\t\"type\": \"source\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"3    proc corr data=financial_services plots=matrix(nvar=all);\",\n\t\t\"type\": \"source\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"ERROR: File WORK.FINANCIAL_SERVICES.DATA does not exist.\",\n\t\t\"type\": \"error\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"4        var event_indicator gender ever_missed_obligation at_current_job_1_year smoker uses_direct_deposit business_owner homeowner\",\n\t\t\"type\": \"source\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"4  !  marital_status num_dependents job_industry citizenship region years_at_residence age debt_to_income num_transactions\",\n\t\t\"type\": \"source\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"4  ! credit_history_mos credit_score amount net_worth;\",\n\t\t\"type\": \"source\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"5    run;\",\n\t\t\"type\": \"source\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"\",\n\t\t\"type\": \"note\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"NOTE: The SAS System stopped processing this step because of errors.\",\n\t\t\"type\": \"note\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"NOTE: PROCEDURE CORR used (Total process time):\",\n\t\t\"type\": \"note\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"      real time           0.00 seconds\",\n\t\t\"type\": \"note\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"      cpu time            0.00 seconds\",\n\t\t\"type\": \"note\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"      \",\n\t\t\"type\": \"note\",\n\t\t\"version\": 1\n\t},\n\t{\n\t\t\"line\": \"6    ;run;quit;ods html5 close;\",\n\t\t\"type\": \"source\",\n\t\t\"version\": 1\n\t}\n]","mime":"application/vnd.sas.compute.log.lines"}]}]},{"kind":2,"language":"sas","value":"proc freq data=financial_services;\r\n    tables marital_status;\r\nrun;","outputs":[]},{"kind":2,"language":"sql","value":"select marital_status from financial_services\r\n    where account_id = 12566","outputs":[]},{"kind":1,"language":"markdown","value":"##### transformations","outputs":[]},{"kind":2,"language":"sas","value":"proc stdize data=financial_services method=std nomiss out=financial_services_out;\r\n\tvar age amount credit_history_mos credit_score debt_to_income net_worth \r\n\t\tnum_transactions years_at_residence;\r\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"data financial_services_out;\r\n\tset financial_services_out;\r\n\r\njob_in_education = 0;\r\njob_in_energy = 0;\r\njob_in_media = 0;\r\njob_in_transport = 0;\r\njob_in_hospitality = 0;\r\njob_in_healthcare = 0;\r\njob_in_manufacturing = 0;\r\njob_in_financial = 0;\r\n\r\nif job_industry = 0\r\n\tthen job_in_education = 1;\r\n\telse if job_industry = 1\r\n\t\tthen job_in_energy = 1;\r\n\t\telse if job_industry = 2\r\n\t\t\tthen job_in_media =1;\r\n\t\t\telse if job_industry = 3\r\n\t\t\t\tthen job_in_transport = 1;\r\n\t\t\t\telse if job_industry = 4\r\n\t\t\t\t\tthen job_in_hospitality = 1;\r\n\t\t\t\t\telse if job_industry = 5\r\n\t\t\t\t\t\tthen job_in_healthcare = 1;\r\n\t\t\t\t\t\telse if job_industry = 6\r\n\t\t\t\t\t\t\tthen job_in_manufacturing = 1;\r\n\t\t\t\t\t\t\telse if job_industry = 7\r\n\t\t\t\t\t\t\t\tthen job_in_financial = 1;\r\n\r\ncitizenship_us = 0;\r\ncitizenship_latam = 0;\r\ncitizenship_eu = 0;\r\ncitizenship_middle_east = 0;\r\ncitizenship_africa = 0;\r\ncitizenship_india = 0;\r\ncitizenship_china = 0;\r\ncitizenship_other = 0;\r\n\r\nif citizenship = 0\r\n\tthen citizenship_us = 1;\r\n\telse if citizenship = 1\r\n\t\tthen citizenship_latam = 1;\r\n\t\telse if citizenship = 2\r\n\t\t\tthen citizenship_eu = 1;\r\n\t\t\telse if citizenship = 3\r\n\t\t\t\tthen citizenship_middle_east = 1;\r\n\t\t\t\telse if citizenship = 4\r\n\t\t\t\t\tthen citizenship_africa = 1;\r\n\t\t\t\t\telse if citizenship = 5\r\n\t\t\t\t\t\tthen citizenship_india = 1;\r\n\t\t\t\t\t\telse if citizenship = 6\r\n\t\t\t\t\t\t\tthen citizenship_china = 1;\r\n\t\t\t\t\t\t\telse if citizenship = 7\r\n\t\t\t\t\t\t\t\tthen citizenship_other = 1;\r\n\r\nregion_ca = 0;\r\nregion_ny = 0;\r\nregion_fl = 0;\r\nregion_tx = 0;\r\nregion_ne = 0;\r\nregion_so = 0;\r\nregion_mw = 0;\r\nregion_we = 0;\r\n\r\nif region = 0\r\n\tthen region_ca = 1;\r\n\telse if region = 1\r\n\t\tthen region_ny = 1;\r\n\t\telse if region = 2\r\n\t\t\tthen region_fl = 1;\r\n\t\t\telse if region = 3\r\n\t\t\t\tthen region_tx = 1;\r\n\t\t\t\telse if region = 4\r\n\t\t\t\t\tthen region_ne = 1;\r\n\t\t\t\t\telse if region = 5\r\n\t\t\t\t\t\tthen region_so = 1;\r\n\t\t\t\t\t\telse if region = 6\r\n\t\t\t\t\t\t\tthen region_mw = 1;\r\n\t\t\t\t\t\t\telse if region = 7\r\n\t\t\t\t\t\t\t\tthen region_we = 1;\r\n\r\nmarital_status_single = 0;\r\nmarital_status_married = 0;\r\nmarital_status_divorced = 0;\r\n\r\nif marital_status = 0\r\n\tthen marital_status_single = 1;\r\n\telse if marital_status = 1\r\n\t\tthen marital_status_married = 1;\r\n\t\telse if marital_status = 2\r\n\t\t\tthen marital_status_divorced = 1;\r\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"options validmemname=extend;\r\n\r\ndata _null_;\r\n\tidMaxLength=length(\"1\");\r\n\tidMaxLength=max(idMaxLength, length(\"0\"));\r\n\tidMaxLength=max(idMaxLength, length(\"2\"));\r\n\r\n\t/* Put it in a macro variable for use in the real code */\r\n\tcall symput('idLength', idMaxLength);\r\nrun;\r\n\r\nproc sql noprint;\r\n\tselect count(*) into :count from financial_services_out;\r\nquit;\r\n\r\ndata financial_services_out;\r\n\tset financial_services_out;\r\n\tlength analytic_partition 3;\r\n\tretain __tmp1-__tmp%trim(&count) __nobs__ __nobs1__ __nobs2__ __nobs3__;\r\n\tdrop _i_ __seed__ __tmp1-__tmp%trim(&count);\r\n\tdrop _n1_ __nobs__ __nobs1__ __nobs2__ __nobs3__;\r\n\tarray __tmp(*) __tmp1-__tmp%trim(&count);\r\n\r\n\tif (_n_=1) then\r\n\t\tdo;\r\n\t\t\t__seed__=-1;\r\n\t\t\t__nobs__=&count;\r\n\r\n\t\t\tdo _i_=1 to dim(__tmp);\r\n\t\t\t\t__tmp(_i_)=_i_;\r\n\t\t\tend;\r\n\t\t\tcall ranperm(__seed__, of __tmp(*));\r\n\t\t\t__nobs1__=round(0.6*__nobs__);\r\n\t\t\t__nobs2__=round(0.3*__nobs__)+__nobs1__;\r\n\t\t\t__nobs3__=round(0.1*__nobs__)+__nobs2__;\r\n\t\tend;\r\n\t_n1_=_n_;\r\n\r\n\tif (_n1_ <=dim(__tmp)) then\r\n\t\tdo;\r\n\r\n\t\t\tif (__tmp(_n1_) > 0) then\r\n\t\t\t\tdo;\r\n\r\n\t\t\t\t\tif (__tmp(_n1_) <=__nobs1__) then\r\n\t\t\t\t\t\tdo;\r\n\t\t\t\t\t\t\tanalytic_partition=1;\r\n\t\t\t\t\t\t\toutput;\r\n\t\t\t\t\t\tend;\r\n\t\t\t\t\telse if (__tmp(_n1_) <=__nobs2__) then\r\n\t\t\t\t\t\tdo;\r\n\t\t\t\t\t\t\tanalytic_partition=0;\r\n\t\t\t\t\t\t\toutput;\r\n\t\t\t\t\t\tend;\r\n\t\t\t\t\telse if (__tmp(_n1_) <=__nobs3__) then\r\n\t\t\t\t\t\tdo;\r\n\t\t\t\t\t\t\tanalytic_partition=2;\r\n\t\t\t\t\t\t\toutput;\r\n\t\t\t\t\t\tend;\r\n\t\t\t\tend;\r\n\t\tend;\r\nrun;","outputs":[]},{"kind":2,"language":"sql","value":"create table financial_services_prep as\r\n   select\r\n      account_id\r\n         label = \"unique identifier\",\r\n      event_indicator\r\n         label = \"indicator for financial services event\",\r\n      gender\r\n         label = \"indicator for gender (0) male, (1) female\",\r\n      ever_missed_obligation\r\n         label = \"indicator for financial services customer ever missed a required obligation over the past 10 years\",\r\n      at_current_job_1_year\r\n         label = \"indicator for financial services customer at their current job for at least 1 year\",\r\n      smoker\r\n         label = \"indicator for financial services customer is a smoker\",\r\n      uses_direct_deposit\r\n         label = \"indicator for financial services customer uses direct deposit\",\r\n      business_owner\r\n         label = \"indicator for financial services customer is a business owner\",\r\n      homeowner\r\n         label = \"indicator for financial services customer is a homeowner\",\r\n      num_dependents\r\n         label = \"number of children in financial services customer's household\",\r\n      years_at_residence\r\n         label = \"number of years financial services customer has lived in current residence\",\r\n      age\r\n         label = \"age of financial services customer\",\r\n      debt_to_income\r\n         label = \"debt to income ratio of financial services customer\",\r\n      num_transactions\r\n         label = \"number of transactions financial services customer has made over the past year in account\",\r\n      credit_history_mos\r\n         label = \"number of months of financial services customer's credit history\",\r\n      credit_score\r\n         label = \"credit score of financial services customer\",\r\n      amount\r\n         label = \"amount associated with financial services customer's account\",\r\n      net_worth\r\n         label = \"net worth of financial services customer\",\r\n      id_important_activity\r\n         label = \"indicator for a recent important activity involving financial services customer for decisioning rule\",\r\n      id_direct_contact\r\n         label = \"indicator for recent contact with financial services customer for decisioning rule\",\r\n      id_current_fs_relationship,\r\n      job_in_education,\r\n      job_in_energy,\r\n      job_in_media,\r\n      job_in_transport,\r\n      job_in_hospitality,\r\n      job_in_healthcare,\r\n      job_in_manufacturing,\r\n      job_in_financial,\r\n      citizenship_us,\r\n      citizenship_latam,\r\n      citizenship_eu,\r\n      citizenship_middle_east,\r\n      citizenship_africa,\r\n      citizenship_india,\r\n      citizenship_china,\r\n      citizenship_other,\r\n      region_ca,\r\n      region_ny,\r\n      region_fl,\r\n      region_tx,\r\n      region_ne,\r\n      region_so,\r\n      region_mw,\r\n      region_we,\r\n      marital_status_single,\r\n      marital_status_married,\r\n      marital_status_divorced,\r\n      analytic_partition\r\n   from financial_services_out","outputs":[]},{"kind":2,"language":"sas","value":"/* export table to csv */\r\nproc export data=financial_services_prep\r\n  outfile=\"&WORKSPACE_PATH./data/financial_services_prep.csv\"\r\n  dbms=csv\r\n  replace;\r\nrun","outputs":[]},{"kind":2,"language":"python","value":"########################\r\n### Create Dataframe ###\r\n########################\r\n\r\nimport pandas as pd\r\n\r\ndm_inputdf = pd.read_csv(\"/workspaces/workspace/data/financial_services_prep.csv\", header=0)\r\nprint(dm_inputdf.dtypes)","outputs":[]},{"kind":2,"language":"python","value":"########################\r\n### Model Parameters ###\r\n########################\r\n\r\n### import python libraries\r\nimport numpy as np\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.metrics import classification_report, confusion_matrix\r\nfrom sklearn.utils import shuffle\r\n\r\nlogit_params = {\r\n             'penalty': 'l2', \r\n             'dual': False, \r\n             'tol': 0.0001, \r\n             'fit_intercept': True, \r\n             'intercept_scaling': 1, \r\n             'class_weight': None, \r\n             'random_state': None, \r\n             'solver': 'newton-cg', \r\n             'max_iter': 100, \r\n             'multi_class': 'auto', \r\n             'verbose': 0, \r\n             'warm_start': False, \r\n             'n_jobs': None, \r\n             'l1_ratio': None\r\n             } \r\nprint(logit_params)\r\n\r\n### model manager information\r\nmodel_name = 'logit_python_finsvcs'\r\nproject_name = 'Credit Default'\r\ndescription = 'Logistic Regression'\r\nmodel_type = 'logistic_regression'\r\npredict_syntax = 'predict_proba'\r\n\r\n### define macro variables for model\r\ndm_dec_target = 'event_indicator'\r\ndm_partitionvar = 'analytic_partition'\r\ncreate_new_partition = 'no' # 'yes', 'no'\r\ndm_key = 'account_id' \r\ndm_classtarget_level = ['0', '1']\r\ndm_partition_validate_val, dm_partition_train_val, dm_partition_test_val = [0, 1, 2]\r\ndm_partition_validate_perc, dm_partition_train_perc, dm_partition_test_perc = [0.3, 0.6, 0.1]\r\n\r\n### create list of regressors\r\nkeep_predictors = [\r\n    'net_worth',\r\n    'credit_score',\r\n    'num_dependents',\r\n    'at_current_job_1_year',\r\n    'credit_history_mos',\r\n    'job_in_education',\r\n    'num_transactions',\r\n    'debt_to_income',\r\n    'amount',\r\n    'gender',\r\n    'age',\r\n    'job_in_hospitality'\r\n    ]\r\n#rejected_predictors = []\r\n\r\n### mlflow\r\nuse_mlflow = 'no' # 'yes', 'no'\r\nmlflow_run_to_use = 0\r\nmlflow_class_labels =['TENSOR']\r\nmlflow_predict_syntax = 'predict'\r\n\r\n### var to consider in bias assessment\r\nbias_var = 'gender'\r\n\r\n### var to consider in partial dependency\r\npd_var1 = 'credit_score'\r\npd_var2 = 'net_worth'\r\n\r\n### create partition column, if not already in dataset\r\nif create_new_partition == 'yes':\r\n    dm_inputdf = shuffle(dm_inputdf)\r\n    dm_inputdf.reset_index(inplace=True, drop=True)\r\n    validate_rows = round(len(dm_inputdf)*dm_partition_validate_perc)\r\n    train_rows = round(len(dm_inputdf)*dm_partition_train_perc) + validate_rows\r\n    test_rows = len(dm_inputdf)-train_rows\r\n    dm_inputdf.loc[0:validate_rows,dm_partitionvar] = dm_partition_validate_val\r\n    dm_inputdf.loc[validate_rows:train_rows,dm_partitionvar] = dm_partition_train_val\r\n    dm_inputdf.loc[train_rows:,dm_partitionvar] = dm_partition_test_val\r\n","outputs":[]},{"kind":2,"language":"python","value":"##############################\r\n### Final Modeling Columns ###\r\n##############################\r\n\r\n### create list of model variables\r\ndm_input = list(dm_inputdf.columns.values)\r\nmacro_vars = (dm_dec_target + ' ' + dm_partitionvar + ' ' + dm_key).split()\r\nrejected_predictors = [i for i in dm_input if i not in keep_predictors]\r\nrejected_vars = rejected_predictors # + macro_vars (include macro_vars if rejected_predictors are explicitly listed - not contra keep_predictors)\r\nfor i in rejected_vars:\r\n    dm_input.remove(i)\r\nprint(dm_input)\r\n\r\n### create prediction variables\r\ndm_predictionvar = [str('P_') + dm_dec_target + dm_classtarget_level[0], str('P_') + dm_dec_target + dm_classtarget_level[1]]\r\ndm_classtarget_intovar = str('I_') + dm_dec_target\r\n\r\n##################\r\n### Data Split ###\r\n##################\r\n\r\n### create train, test, validate datasets using existing partition column\r\ndm_traindf = dm_inputdf[dm_inputdf[dm_partitionvar] == dm_partition_train_val]\r\nX_train = dm_traindf.loc[:, dm_input]\r\ny_train = dm_traindf[dm_dec_target]\r\ndm_testdf = dm_inputdf.loc[(dm_inputdf[dm_partitionvar] == dm_partition_test_val)]\r\nX_test = dm_testdf.loc[:, dm_input]\r\ny_test = dm_testdf[dm_dec_target]\r\ndm_validdf = dm_inputdf.loc[(dm_inputdf[dm_partitionvar] == dm_partition_validate_val)]\r\nX_valid = dm_validdf.loc[:, dm_input]\r\ny_valid = dm_validdf[dm_dec_target]","outputs":[]},{"kind":2,"language":"python","value":"#####################\r\n### Training Code ###\r\n#####################\r\n\r\n### estimate & fit model\r\ndm_model = LogisticRegression(**logit_params)\r\ndm_model.fit(X_train, y_train)\r\n\r\n### score full data\r\nfullX = dm_inputdf.loc[:, dm_input]\r\nfully = dm_inputdf[dm_dec_target]\r\n#plot_roc_curve(dm_model, fullX, fully)\r\ndm_scoreddf_prob = pd.DataFrame(dm_model.predict_proba(fullX), columns=dm_predictionvar)\r\ndm_scoreddf_class = pd.DataFrame(dm_model.predict(fullX), columns=[dm_classtarget_intovar])\r\ndm_scoreddf = pd.concat([dm_scoreddf_prob, dm_scoreddf_class], axis=1)\r\n\r\n### create tables with predicted values\r\ntrainProba = dm_model.predict_proba(X_train)\r\ntestProba = dm_model.predict_proba(X_test)\r\nvalidProba = dm_model.predict_proba(X_valid)\r\ntrainData = pd.concat([y_train.reset_index(drop=True), pd.Series(data=trainProba[:,1])], axis=1)\r\ntestData = pd.concat([y_test.reset_index(drop=True), pd.Series(data=testProba[:,1])], axis=1)\r\nvalidData = pd.concat([y_valid.reset_index(drop=True), pd.Series(data=validProba[:,1])], axis=1)\r\n\r\n### print model & results\r\npredictions = dm_model.predict(X_test)\r\ncols = X_train.columns\r\npredictors = np.array(cols)\r\ntn, fp, fn, tp = confusion_matrix(y_test, predictions).ravel()\r\nprint(description)\r\nprint(description)\r\nprint('model_parameters')\r\nprint(dm_model)\r\nprint(' ')\r\nprint('model_performance')\r\nprint('score_full:', dm_model.score(fullX, fully))\r\nprint('score_train:', dm_model.score(X_train, y_train))\r\nprint('score_test:', dm_model.score(X_test, y_test))\r\nprint('score_valid:', dm_model.score(X_valid, y_valid))\r\nprint('confusion_matrix:')\r\nprint('(tn, fp, fn, tp)')\r\nprint((tn, fp, fn, tp))\r\nprint('classification_report:')\r\nprint(classification_report(y_test, predictions))\r\n\r\n### print logit odds ratios\r\norat = np.exp(dm_model.coef_, out=None)\r\nc1 = np.vstack([predictors,orat])\r\nc2 = np.transpose(c1)\r\nc = pd.DataFrame(c2, columns=['predictors', 'odds_ratio'])\r\nprint('intercept:')\r\nprint(dm_model.intercept_)\r\nprint('odds_ratios:')\r\nprint(c)","outputs":[]},{"kind":2,"language":"python","value":"####################\r\n### Pickle Model ###\r\n####################\r\n\r\nimport pickle\r\n\r\ndm_pklpath = \"/workspaces/workspace/data/financial_services_pkl\"\r\n\r\nwith open(dm_pklpath, 'wb') as f:\r\n\tpickle.dump(dm_model, f)","outputs":[]},{"kind":2,"language":"python","value":"###############\r\n### SAS API ###\r\n###############\r\n\r\nfrom sasviya.ml.linear_model import LogisticRegression\r\n\r\ndm_model = LogisticRegression(\r\n        tol=1e-8,\r\n        fit_intercept=True,\r\n        solver=\"newrap\",\r\n        selection=None,\r\n        verbose=0,\r\n        max_iter=None,\r\n        max_time=None\r\n        )\r\ndm_model.fit(X_train, y_train)","outputs":[]},{"kind":2,"language":"sas","value":"cas casauto sessopts=(caslib=casuser, metrics=true, timeout=900);\r\n\r\nproc astore;\r\n  upload rstore=casuser.financial_services_astore\r\n         store=\"/greenmonthly-export/ssemonthly/homes/Chris.Parrish@sas.com/financial_services.astore\";\r\nquit;","outputs":[]}]