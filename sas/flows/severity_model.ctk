<Task revision="1" schemaVersion="7.3">
    <Registration>
        <Name>Severity Models.ctk</Name> 
        <Description>The Severity Models task estimates parameters of any arbitrary continuous probability distribution that is used to model the magnitude (severity) of a continuous-valued event of interest.</Description> 
        <GUID>be0c1e14-7237-4064-8fc0-823547d49be5</GUID>
        <Procedures>SEVSELECT CAS</Procedures>
        <Links>
            <Link href="https://documentation.sas.com/?softwareId=STUDIOBASIC&amp;softwareVersion=01&amp;softwareContextId=tasks&amp;requestor=inapp">SAS Studio Task Reference Guide</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=ANVIYA&amp;softwareVersion=01&amp;softwareContextId=proc_sevselect&amp;requestor=inapp">The SEVSELECT Procedure</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=PGMVIYA&amp;softwareVersion=01&amp;softwareContextId=proc_cas&amp;requestor=inapp">The CAS Procedure</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="http://support.sas.com/training/tutorial/viya/index.html">SAS Tutorials</Link>            
        </Links>
    </Registration>
    
    <Metadata>
        <DataSources>
            <DataSource libraryEngineInclude="CAS" name="dataset" where="true">
                <Roles>
                    <!-- The specification of response variable is optional if you specify at least one type of censoring. -->
                    <Role exclude="continuousVariable,classVariable,byVariable,offsetVariable,weightVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="1" minVars="0" name="dependVariable" type="N">Dependent variable:</Role>
                    <Role exclude="dependVariable,classVariable,byVariable,offsetVariable,weightVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="0" minVars="0" name="continuousVariable" order="true" type="N">Continuous variables:</Role>
                    <Role exclude="dependVariable,continuousVariable,byVariable,offsetVariable,weightVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="0" minVars="0" name="classVariable" order="true" type="A">Classification variables:</Role>
                    <Role exclude="dependVariable,continuousVariable,classVariable,byVariable,offsetVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="1" minVars="0" name="weightVariable" type="N">Weight:</Role>
                    <Role exclude="dependVariable,continuousVariable,classVariable,offsetVariable,weightVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="0" minVars="0" name="byVariable" order="true" type="A">Group analysis by:</Role>
                    <Role exclude="dependVariable,continuousVariable,classVariable,byVariable,weightVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="1" minVars="0" name="offsetVariable" type="N">Offset variable:</Role>
                    <!-- Variables that define censoring limit and/or truncation threshold. -->
                    <Role exclude="dependVariable,continuousVariable,classVariable,byVariable,offsetVariable,weightVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" indent="3" maxVars="1" minVars="1" name="leftCensorVariable" type="N">Left-censoring variable:</Role>
                    <Role exclude="dependVariable,continuousVariable,classVariable,byVariable,offsetVariable,weightVariable,leftCensorVariable,leftTruncateVariable,rightTruncateVariable" indent="3" maxVars="1" minVars="1" name="rightCensorVariable" type="N">Right-censoring variable:</Role>
                    <Role exclude="dependVariable,continuousVariable,classVariable,byVariable,offsetVariable,weightVariable,leftCensorVariable,rightCensorVariable,rightTruncateVariable" indent="3" maxVars="1" minVars="1" name="leftTruncateVariable" type="N">Left-truncation variable:</Role>
                    <Role exclude="dependVariable,continuousVariable,classVariable,byVariable,offsetVariable,weightVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable" indent="3" maxVars="1" minVars="1" name="rightTruncateVariable" type="N">Right-truncation variable:</Role>
                    <Role indent="2" maxVars="0" minVars="0" name="copyVariables" order="true" type="A">Variables to include:</Role>
                </Roles>
            </DataSource>
        </DataSources>

        <Options>
            <Option inputType="string" name="dataTab">Data</Option>
            <Option inputType="string" name="dataGroup">Data</Option>
            <Option inputType="string" name="rolesGroup">Roles</Option>
            <Option inputType="string" name="addRolesGroup">Additional Roles</Option>
            <!-- Dependent (loss) variable related options -->
            <Option defaultValue="0" indent="1" inputType="checkbox" name="leftCensor">Set the left-censoring limit</Option>
            <Option defaultValue="1" indent="2" inputType="radio" name="leftCensorVarChoice" variable="leftCensorGrp">Specify variable</Option>
            <Option indent="2" inputType="radio" name="leftCensorValueChoice" variable="leftCensorGrp">Specify value</Option>
            <Option indent="3" inputType="numbertext" invalidMessage="Enter a number greater than 0." minValue="0.00000000000000000000000001" missingMessage="Enter a number greater than 0." name="leftCensorValue" rangeMessage="Enter a number greater than 0." required="true">Left-censoring limit value:</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="rightCensor">Set the right-censoring limit</Option>
            <Option defaultValue="1" indent="2" inputType="radio" name="rightCensorVarChoice" variable="rightCensorGrp">Specify variable</Option>
            <Option indent="2" inputType="radio" name="rightCensorValueChoice" variable="rightCensorGrp">Specify value</Option>
            <Option indent="3" inputType="numbertext" invalidMessage="Enter a number greater than 0." minValue="0.00000000000000000000000001" missingMessage="Enter a number greater than 0." name="rightCensorValue" rangeMessage="Enter a number greater than 0." required="true">Right-censoring limit value:</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="leftTruncate">Set the left-truncation threshold</Option>
            <Option defaultValue="1" indent="2" inputType="radio" name="leftTruncateVarChoice" variable="leftTruncateGrp">Specify variable</Option>
            <Option indent="2" inputType="radio" name="leftTruncateValueChoice" variable="leftTruncateGrp">Specify value</Option>
            <Option indent="3" inputType="numbertext" invalidMessage="Enter a number greater than 0." minValue="0.00000000000000000000000001" missingMessage="Enter a number greater than 0." name="leftTruncateValue" rangeMessage="Enter a number greater than 0." required="true">Left-truncation threshold value:</Option>
            <!-- The probability that the underlying severity event is observed for the specified left-threshold value -->
            <Option defaultValue="" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than 0 and less than or equal to 1." maxValue="1" minValue="0.00000000000000000000000001" name="ltProbObserved" promptMessage="Enter a number greater than 0 and less than or equal to 1." rangeMessage="Enter a number greater than 0 and less than or equal to 1.">Probability of observability:</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="rightTruncate">Set the right-truncation threshold</Option>
            <Option defaultValue="1" indent="2" inputType="radio" name="rightTruncateVarChoice" variable="rightTruncateGrp">Specify variable</Option>
            <Option indent="2" inputType="radio" name="rightTruncateValueChoice" variable="rightTruncateGrp">Specify value</Option>
            <Option indent="3" inputType="numbertext" invalidMessage="Enter a number greater than 0." minValue="0.00000000000000000000000001" missingMessage="Enter a number greater than 0." name="rightTruncateValue" rangeMessage="Enter a number greater than 0." required="true">Right-truncation threshold value:</Option>
            <!-- Model related options -->
            <Option inputType="string" name="modelTab">Model</Option>
            <Option inputType="string" name="distributionsGroup">Distributions</Option>
            <Option inputType="string" name="distributionsNote">Specify candidate distributions of the dependent variable:</Option>
            <Option defaultValue="1" inputType="radio" name="predefDistributions" variable="distributionChoiceGrp">Predefined distributions</Option>
            <Option inputType="radio" name="allDistributions" variable="distributionChoiceGrp">All distributions</Option>
            <Option inputType="radio" name="customDistributions" variable="distributionChoiceGrp">Selected distributions</Option>
            <Option defaultValue="burrDistribution, expDistribution, gammaDistribution, genParetoDistribution, invGuassDistribution, lognDistribution, paretoDistribution, weibullDistribution" inputType="dualselector" name="distributionList"/>
            <Option inputType="string" name="burrDistribution" returnValue="burr">Burr</Option>
            <Option inputType="string" name="expDistribution" returnValue="exp">Exponential</Option>
            <Option inputType="string" name="gammaDistribution" returnValue="gamma">Gamma</Option>
            <Option inputType="string" name="genParetoDistribution" returnValue="gpd">Generalized Pareto</Option>
            <Option inputType="string" name="invGuassDistribution" returnValue="igauss">Inverse Gaussian</Option>
            <Option inputType="string" name="lognDistribution" returnValue="logn">Lognormal</Option>
            <Option inputType="string" name="paretoDistribution" returnValue="pareto">Pareto</Option>
            <Option inputType="string" name="weibullDistribution" returnValue="weibull">Weibull</Option>
            <Option inputType="string" name="tweedieDistribution" returnValue="tweedie">Tweedie</Option>
            <Option inputType="string" name="scaledTweedieDistribution" returnValue="stweedie">Scaled Tweedie</Option>
            <Option indent="1" inputType="string" name="tweedieDistNote">The Tweedie distribution is not valid for regression modeling. Use the scaled Tweedie distribution instead.</Option>

            <Option inputType="string" name="modelEffectsGroup">Scale Model Effects</Option>
            <Option defaultValue="1" inputType="radio" name="mainModel" variable="radioModelType">Main effects model</Option>
            <Option inputType="radio" name="advancedModel" variable="radioModelType">Custom model</Option>
            <Option excludeTools="POLYEFFECT,TWOFACT,THREEFACT,NFACTPOLY" fixedInterceptVisible="false" inputType="mixedeffects" name="modelBuilder" roleClassification="classVariable" roleContinuous="continuousVariable" width="100%"/>
           
            <!-- Options tab -->
            <Option inputType="string" name="optionsTab">Options</Option> 
            <Option inputType="string" name="estimationGroup">Estimation</Option>
            <Option inputType="string" name="edfGroup">Empirical Distribution Function</Option>
            <!-- No censoring or truncation - STANDARD is used -->
            <Option inputType="string" name="edfMethods1" returnValue="standard">The standard empirical estimation method is used.</Option>
            <!-- Both left censoring & right censoring -->
            <Option defaultValue="auto" inputType="combobox" name="edfMethods2">Method:</Option>
            <!-- All other combinations of censoring & truncation -->
            <Option defaultValue="auto" inputType="combobox" name="edfMethods3">Method:</Option>
            <Option inputType="string" name="edfAuto" returnValue="auto">Automatic (default)</Option>
            <Option inputType="string" name="edfKm" returnValue="kaplanmeier">Kaplan-Meier</Option>
            <Option inputType="string" name="edfMkm" returnValue="modifiedkm">Modified Kaplan-Meier</Option>
            <Option inputType="string" name="edfNoTurnbull" returnValue="noturnbull">No Turnbull</Option>
            <Option inputType="string" name="edfTurnbull" returnValue="turnbull">Turnbull</Option>
            <Option inputType="string" name="edfStd" returnValue="standard">Standard</Option>
            <!-- Modified Kaplan-Meier option -->
            <Option defaultValue="minRiskSizeRelative" indent="1" inputType="combobox" name="minRiskSize">Specify the minimum risk-set size:</Option>
            <Option inputType="string" name="minRiskSizeRelative">Specify relative lower bound</Option>
            <Option inputType="string" name="minRiskSizeAbsolute">Specify absolute lower bound</Option>
 			<Option defaultValue="0.5" hintMessage="0.5" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than 0 and less than 1." maxValue="0.9999999999999999" minValue="0.00000000000000000000000001" name="relativeAlpha" promptMessage="Enter a number greater than 0 and less than 1." rangeMessage="Enter a number greater than 0 and less than 1.">Alpha:</Option>
 			<Option defaultValue="1" hintMessage="1" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than 0." minValue="0.00000000000000000000000001" name="relativeC" promptMessage="Enter a number greater than 0." rangeMessage="Enter a number greater than 0.">C:</Option>
			<Option decimalPlaces="0" defaultValue="0" increment="1" indent="2" inputType="numstepper" invalidMessage="Enter an integer greater than or equal to 0." minValue="0" name="absoluteSize" promptMessage="Enter an integer greater than or equal to 0." rangeMessage="Enter an integer greater than or equal to 0.">Absolute lower bound on the size:</Option>
            <!-- Turnbull option -->
            <Option defaultValue="0" indent="1" inputType="checkbox" name="ensureMLEChkbox">Use maximum likelihood for the final EDF estimates</Option>
            <Option defaultValue="0.00000001" hintMessage="0.00000001" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than 0 and less than 1." maxValue="0.9999999999999999" minValue="0.00000000000000000000000001" missingMessage="Enter a number greater than 0 and less than 1." name="zeroProb" rangeMessage="Enter a number greater than 0 and less than 1." required="true">The threshold below which an empirical estimate of the probability is considered zero:</Option>
            <Option defaultValue="maxiterDefaultChoice" indent="1" inputType="combobox" name="maxiterCombo">Maximum number of iterations:</Option>
            <Option inputType="string" name="maxiterDefaultChoice">Use 500 (default)</Option>
            <Option inputType="string" name="maxiterCustomChoice">Use custom value</Option>
            <Option decimalPlaces="0" defaultValue="500" increment="1" indent="2" inputType="numbertext" invalidMessage="Enter an integer that is greater than 0 for the maximum number of iterations." minValue="1" missingMessage="Enter an integer that is greater than 0 for the maximum number of iterations." name="maxiter" rangeMessage="Enter an integer that is greater than 0 for the maximum number of iterations." required="true">Custom maximum number of iterations:</Option>
            <Option defaultValue="epsDefaultChoice" indent="1" inputType="combobox" name="epsCombo">Convergence criterion:</Option>
            <Option inputType="string" name="epsDefaultChoice">Use 1e-8 (default)</Option>
            <Option inputType="string" name="epsCustomChoice">Use custom value</Option>
            <Option defaultValue="0.00000001" indent="2" inputType="numbertext" invalidMessage="Enter a number greater than or equal to 0." minValue="0" missingMessage="Enter a number greater than or equal to 0." name="epsValue" rangeMessage="Enter a number greater than or equal to 0." required="true">Custom value:</Option>
           
            <Option defaultValue="df" inputType="combobox" name="varDivisor">Variance divisor:</Option>
            <Option inputType="string" name="dof" returnValue="df">Degrees of freedom (default)</Option>
            <Option inputType="string" name="numObs" returnValue="n">Number of observations</Option>

            <!-- Nonlinear Optimization -->
            <Option inputType="string" name="optimizationGroup">Nonlinear Optimization</Option>
            <Option defaultValue="trureg" inputType="combobox" name="nlMethod">Method:</Option>
            <Option inputType="string" name="noOptMethod" returnValue="none">No optimization</Option>
            <Option inputType="string" name="conjugateGradient" returnValue="congra">Conjugate-gradient</Option>
            <Option inputType="string" name="doubleDogleg" returnValue="dbldog">Double-dogleg</Option>
            <Option inputType="string" name="nelderMead" returnValue="nmsimp">Nelder-Mead simplex</Option>
            <Option inputType="string" name="newtonRaphson" returnValue="newrap">Newton-Raphson with line-search</Option>
            <Option inputType="string" name="newtonRaphsonRidge" returnValue="nrridg">Newton-Raphson with ridging</Option>
            <Option inputType="string" name="quasiNewton" returnValue="quanew">Quasi-Newton</Option>
            <Option inputType="string" name="trustRegion" returnValue="trureg">Trust region (default)</Option>
            <Option defaultValue="nlMaxiterDefaultChoice" inputType="combobox" name="nlMaxiterCombo">Maximum number of iterations:</Option>
            <Option inputType="string" name="nlMaxiterDefaultChoice">Use default value</Option>
            <Option decimalPlaces="0" defaultValue="50" indent="1" inputType="numbertext" invalidMessage="Enter an integer that is greater than 0 for the maximum number of iterations." minValue="1" missingMessage="Enter an integer that is greater than 0 for the maximum number of iterations." name="nlMaxiter" rangeMessage="Enter an integer that is greater than 0 for the maximum number of iterations." required="true">Custom maximum number of iterations:</Option>

            <!-- Statistics -->
            <Option inputType="string" name="statsGroup">Statistics</Option>
            <Option defaultValue="defaultStatsChoice" inputType="combobox" name="statsChoice">Display statistics:</Option>
            <Option inputType="string" name="defaultStatsChoice">Default statistics</Option>
            <Option inputType="string" name="customStatsChoice">Default and selected statistics</Option>
            <Option inputType="string" name="allStatsChoice">All statistics</Option>
            <Option inputType="string" name="noneChoice">None</Option>
            <Option defaultValue="1" indent="1" inputType="checkbox" name="modelSelection">Model selection summary</Option>
            <Option defaultValue="1" indent="1" inputType="checkbox" name="convergenceStatus">Convergence status of parameter estimation process</Option>
            <Option defaultValue="1" indent="1" inputType="checkbox" name="statisticsOfFit">Statistics of fit</Option>
            <Option defaultValue="1" indent="1" inputType="checkbox" name="parameterEstimates">Final parameter estimates</Option>
            <Option defaultValue="1" indent="1" inputType="checkbox" name="optimizationSummary">Optimization summary</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="distributionInfo">Detailed information about all distributions</Option>
			<Option defaultValue="0" indent="1" inputType="checkbox" name="allFitStatistics">Statistics of fit for all the distribution models</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="descStats">Descriptive statistics for the dependent variable and the regression effects that do not contain a CLASS variable</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="estimationDetails">Details of the estimation process</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="initialValues">Initial parameter values and bounds</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="optimizationHistory">Optimization iteration history</Option>
            <!-- added statistics in SAS Studio 5.2 release -->
            <Option defaultValue="1" indent="1" inputType="checkbox" name="distributionParam">Information about number of parameters in a distribution's model</Option>

            <!-- Plots related options -->
            <Option inputType="string" name="plotsGroup">Plots</Option>
            <Option defaultValue="defaultPlots" inputType="combobox" name="selectPlotsCombo">Select plots to display:</Option>
            <Option inputType="string" name="defaultPlots">Default plots</Option>
            <Option inputType="string" name="selectedPlots">Selected plots</Option>
            <Option inputType="string" name="allPlots">All plots</Option>
            <Option inputType="string" name="noPlots">No plots</Option>
            <Option inputType="string" name="selPlotsGroup">Plots</Option>
            <Option defaultValue="1" inputType="checkbox" name="cdfPlot">Comparative cumulative distribution function plot</Option>
            <Option defaultValue="0" inputType="checkbox" name="cdfPlotPerDist">Cumulative distribution function plot for each distribution</Option>
            <Option defaultValue="0" inputType="checkbox" name="ppPlot">P-P plot for each distribution</Option>
            <Option defaultValue="0" inputType="checkbox" name="qqPlot">Q-Q plot for each distribution</Option>
            <Option defaultValue="1" inputType="checkbox" name="pdfPlot">Comparative probability density function plot</Option>
            <Option defaultValue="0" inputType="checkbox" name="pdfPlotPerDist">Probability density function plot for each distribution</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="pdfHistogram">Add the histogram of the dependent variable</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="pdfKernel">Add the kernel density estimate of the dependent variable</Option>

            <!-- Model selection related options -->
            <Option inputType="string" name="selectionTab">Selection</Option>
            <!-- Model selection methods -->
            <Option inputType="string" name="selectionGroup">Model Selection</Option>
            <Option defaultValue="none" inputType="combobox" name="selectionMethod">Selection method:</Option>
            <Option inputType="string" name="noneSelectionChoice" returnValue="none">None</Option>
            <Option inputType="string" name="forwardChoice" returnValue="forward">Forward selection</Option>
            <Option inputType="string" name="backwardChoice" returnValue="backward">Backward elimination</Option>
            <Option inputType="string" name="stepwiseChoice" returnValue="stepwise">Stepwise regression</Option>
            <!-- The only SAS Viya procedure that supports forward-swap selection method is the SEVSELECT procedure -->
            <Option inputType="string" name="forwardSwapChoice" returnValue="forwardswap">Forward-swap selection</Option>
            <Option defaultValue="sbc" inputType="combobox" name="selectMethod">Add/remove effects with:</Option>
            <Option defaultValue="sbc" inputType="combobox" name="stopMethod">Stop adding/removing effects with:</Option>
            <Option defaultValue="sbc" inputType="combobox" name="chooseMethod">Select best model by:</Option>
            <Option inputType="string" name="aicChoice" returnValue="aic">Akaike's information criterion</Option>
            <Option inputType="string" name="aiccChoice" returnValue="aicc">Akaike's information criterion corrected for small-sample bias</Option>
            <Option inputType="string" name="sbcChoice" returnValue="sbc">Schwarz Bayesian information criterion (default)</Option>
            <!-- The model selection include list applies only to custom model since CTM select control can only link to one source. -->
            <Option inputType="checkbox" name="useIncludeList">Select effects to include in all models</Option>
            <Option indent="1" inputType="select" multiple="true" name="includeList" sourceLink="modelBuilder">Effects to include:</Option>
 
            <Option inputType="string" name="selectionDetailsGroup">Details</Option>
            <Option defaultValue="summary" inputType="combobox" name="detailsCombo">Selection process details:</Option>
            <Option inputType="string" name="summaryDetailsChoice" returnValue="summary">Selection summary (default)</Option>
            <Option inputType="string" name="stepDetailsChoice" returnValue="steps">Details for each step</Option>
            <Option inputType="string" name="allDetailsChoice" returnValue="all">All</Option>

            <Option defaultValue="entireEffectChoice" inputType="combobox" name="splitClassCombo">Add/remove classification effects as:</Option>
            <Option inputType="string" name="singleDFEffectChoice">Individual single degree of freedom effects</Option>
            <Option inputType="string" name="entireEffectChoice">An entire effect</Option>
    
            <Option inputType="string" name="hierarchyLabel">Model effects hierarchy: For any term to be in the model, all model effects contained in the term must be present in the model</Option>
            <Option defaultValue="0" inputType="checkbox" name="hierarchy">Maintain hierarchy of effects</Option>

			<!-- Code generation options -->
			<Option inputType="string" name="codeGenerationGroup">Code Generation</Option>
            <Option defaultValue="1" inputType="radio" name="procSevselect" variable="proc">Use SEVSELECT procedure</Option>
            <Option inputType="radio" name="procCas" variable="proc">Use CAS procedure</Option>
            <Option indent="1" inputType="string" name="featureNANote">Plots are not available when using the CAS procedure for code generation.</Option>

            <!-- Output related options -->
            <Option inputType="string" name="outputTab">Output</Option>
            <Option inputType="string" name="outputGroup">Output Data</Option>
            <Option inputType="string" name="casOutputLibrefNote">The following tables must use a CAS engine libref.</Option>
            <Option defaultValue="0" inputType="checkbox" name="outputEST">Create parameter estimates and standard errors data</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputESTName" required="true" unique="true">Specify a CAS table:</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="outputESTCovout">Include the estimate of the covariance structure</Option>

            <Option defaultValue="0" inputType="checkbox" name="outputStore">Create severity model in item store format</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputStoreName" required="true" unique="true">Specify a CAS table:</Option>

            <Option defaultValue="0" inputType="checkbox" name="outputOut">Create estimates of the scoring functions and quantiles data</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputOutName" required="true" unique="true">Specify a CAS table:</Option>
            <Option height="12em" indent="1" inputType="select" multiple="true" name="scoringFuncSelect">Specify scoring functions:</Option>
            <Option inputType="string" name="scoringFuncMean" returnValue="mean">Mean</Option>
            <Option inputType="string" name="scoringFuncCDF" returnValue="cdf">Cumulative distribution function</Option>
            <Option inputType="string" name="scoringFuncLogCDF" returnValue="logcdf">Natural logarithm of cumulative distribution function</Option>
            <Option inputType="string" name="scoringFuncPDF" returnValue="pdf">Probability density function</Option>
            <Option inputType="string" name="scoringFuncLogPDF" returnValue="logpdf">Natural logarithm of probability density function</Option>
            <Option inputType="string" name="scoringFuncSDF" returnValue="sdf">Survival distribution function</Option>
            <Option inputType="string" name="scoringFuncLogSDF" returnValue="logsdf">Natural logarithm of survival distribution function</Option>
            <Option indent="1" inputType="string" name="includeVarsInstruction">Include variables from the input data set:</Option>
            <Option indent="1" inputType="radio" name="includeAllVars" variable="includeVars">All variables</Option>
            <Option indent="1" inputType="radio" name="includeSelectedVars" variable="includeVars">Selected variables</Option>
            <Option defaultValue="1" indent="1" inputType="radio" name="includeNoVars" variable="includeVars">No variables</Option>
            <OptionTable addRemoveRowTools="true" indent="1" initialNumberOfRows="1" label="Specify quantiles" name="quantilesTable" showColumnHeadings="true">
                <Columns>
                    <Column label="CDF value" name="quantilesTable_CDF">
                        <Option inputType="numbertext" invalidMessage="Enter a number greater than 0 and less than 1." maxValue="0.9999999999999999" minValue="0.00000000000000000000000001" promptMessage="Enter a number greater than 0 and less than 1." rangeMessage="Enter a number greater than 0 and less than 1."/>
                    </Column>
                    <Column label="Name suffix" name="quantilesTable_Name">
                        <Option inputType="inputtext"/>
                    </Column>
                 </Columns>
            </OptionTable>           
			<Option inputType="string" name="odsOutputLibrefNote">The following data sets must use a SAS libref.</Option>
			<Option defaultValue="0" inputType="checkbox" name="outputSTAT">Save fit statistics</Option>
			<Option defaultValue="work.outstat" indent="1" inputType="outputdata" libraryEngineInclude="v9" name="outputSTATName" required="true" unique="true">Specify a SAS data set:</Option>
			<Option defaultValue="0" inputType="checkbox" name="outputCDF">Save CDF estimates</Option>
			<Option defaultValue="work.outcdf" indent="1" inputType="outputdata" libraryEngineInclude="v9" name="outputCDFName" required="true" unique="true">Specify a SAS data set:</Option>
			<Option defaultValue="0" inputType="checkbox" name="outputModelInfo">Save distribution information</Option>
			<Option defaultValue="work.outdistinfo" indent="1" inputType="outputdata" libraryEngineInclude="v9" name="outputModelInfoName" required="true" unique="true">Specify a SAS data set:</Option>
			<!-- Code comments -->
			<Option inputType="string" name="commentMacro">Macro to check the existence of the 'svrtdist' CAS table and load it if not available</Option>
			<Option inputType="string" name="commentSvrtdistLoaded">Check if 'svrtdist' is already loaded</Option>
			<Option inputType="string" name="commentSampleCaslib">Try to load 'svrtdist' from the 'samples' caslib</Option>
			<Option inputType="string" name="commentPublicCaslib">Try to load 'svrtdist' from the 'public' caslib</Option>
			<Option inputType="string" name="commentRunSevselect">If 'svrtdist' could not be loaded from a caslib, create it by using PROC SEVSELECT</Option>
        </Options>
    </Metadata>

    <UI>
        <Container option="dataTab">
            <Group open="true" option="dataGroup">
                <DataItem data="dataset"/>
            </Group>
            <Group open="true" option="rolesGroup">
                <RoleItem role="dependVariable"/>
                    <OptionItem option="leftCensor"/>
                    <OptionItem option="leftCensorVarChoice"/>
                    <RoleItem role="leftCensorVariable"/>
                    <OptionItem option="leftCensorValueChoice"/>
                    <OptionItem option="leftCensorValue"/>
                    <OptionItem option="rightCensor"/>
                    <OptionItem option="rightCensorVarChoice"/>
                    <RoleItem role="rightCensorVariable"/>
                    <OptionItem option="rightCensorValueChoice"/>
                    <OptionItem option="rightCensorValue"/>
                    <OptionItem option="leftTruncate"/>
                    <OptionItem option="leftTruncateVarChoice"/>
                    <RoleItem role="leftTruncateVariable"/>
                    <OptionItem option="leftTruncateValueChoice"/>
                    <OptionItem option="leftTruncateValue"/>
                    <OptionItem option="ltProbObserved"/>
                    <OptionItem option="rightTruncate"/>
                    <OptionItem option="rightTruncateVarChoice"/>
                    <RoleItem role="rightTruncateVariable"/>
                    <OptionItem option="rightTruncateValueChoice"/>
                    <OptionItem option="rightTruncateValue"/>
                <RoleItem role="continuousVariable"/>
                <RoleItem role="classVariable"/>
            </Group>
            <Group open="false" option="addRolesGroup">
                <RoleItem role="weightVariable"/>
                <RoleItem role="byVariable"/>
            </Group>
        </Container>
        
        <Container option="modelTab"> 
            <Group open="true" option="distributionsGroup">
                <OptionItem option="distributionsNote"/>
                <OptionItem option="predefDistributions"/>
                <OptionItem option="allDistributions"/>
                <OptionItem option="customDistributions"/>
                <OptionChoice option="distributionList">
                    <OptionItem option="burrDistribution"/>
                    <OptionItem option="expDistribution"/>
                    <OptionItem option="gammaDistribution"/>
                    <OptionItem option="genParetoDistribution"/>
                    <OptionItem option="invGuassDistribution"/>
                    <OptionItem option="lognDistribution"/>
                    <OptionItem option="paretoDistribution"/>  
                    <OptionItem option="weibullDistribution"/> 
                    <OptionItem option="tweedieDistribution"/>
                    <OptionItem option="scaledTweedieDistribution"/>
                </OptionChoice>                
				<OptionItem option="tweedieDistNote"/>
            </Group>
            <Group open="true" option="modelEffectsGroup">
                <OptionItem option="mainModel"/>
                <OptionItem option="advancedModel"/>
                <OptionItem option="modelBuilder"/>
                <RoleItem role="offsetVariable"/>
            </Group>
       </Container>

        <Container option="optionsTab"> 
            <Group open="true" option="statsGroup">
                <OptionChoice option="statsChoice">
                    <OptionItem option="defaultStatsChoice"/>
                    <OptionItem option="customStatsChoice"/>
                    <OptionItem option="allStatsChoice"/>
                    <OptionItem option="noneChoice"/>
                </OptionChoice>
                <OptionItem option="modelSelection"/>
                <OptionItem option="distributionInfo"/>
                <OptionItem option="distributionParam"/>
                <OptionItem option="convergenceStatus"/>
                <OptionItem option="optimizationSummary"/>
                <OptionItem option="statisticsOfFit"/>
                <OptionItem option="parameterEstimates"/>
                <OptionItem option="allFitStatistics"/>
                <OptionItem option="descStats"/>
                <OptionItem option="estimationDetails"/>
                <OptionItem option="initialValues"/>
                <OptionItem option="optimizationHistory"/>
            </Group>
            <Group open="true" option="plotsGroup">
                <OptionChoice option="selectPlotsCombo">
                    <OptionItem option="defaultPlots"/>
                    <OptionItem option="selectedPlots"/>
                    <OptionItem option="allPlots"/>
                    <OptionItem option="noPlots"/>
                </OptionChoice>
                <Group open="true" option="selPlotsGroup">
                    <OptionItem option="cdfPlot"/>
                    <OptionItem option="cdfPlotPerDist"/>
                    <OptionItem option="ppPlot"/>
                    <OptionItem option="qqPlot"/>
                    <OptionItem option="pdfPlot"/>
                    <OptionItem option="pdfPlotPerDist"/>
                    <OptionItem option="pdfHistogram"/>
                    <OptionItem option="pdfKernel"/>
                </Group>
            </Group>
            <Group open="false" option="optimizationGroup">
                <OptionChoice option="nlMethod">
                    <OptionItem option="noOptMethod"/>
                    <OptionItem option="conjugateGradient"/>
                    <OptionItem option="doubleDogleg"/>
                    <OptionItem option="nelderMead"/>
                    <OptionItem option="newtonRaphson"/>
                    <OptionItem option="newtonRaphsonRidge"/>
                    <OptionItem option="quasiNewton"/>
                    <OptionItem option="trustRegion"/>
                </OptionChoice>
                <OptionChoice option="nlMaxiterCombo">
                    <OptionItem option="nlMaxiterDefaultChoice"/>
                    <OptionItem option="maxiterCustomChoice"/>
                </OptionChoice>
                <OptionItem option="nlMaxiter"/>
            </Group>
            <Group open="false" option="estimationGroup">
                <Group open="true" option="edfGroup">
                    <OptionItem option="edfMethods1"/>
                    <OptionChoice option="edfMethods2">
                        <OptionItem option="edfAuto"/>
                        <OptionItem option="edfTurnbull"/>
                        <OptionItem option="edfNoTurnbull"/>
                    </OptionChoice>
                    <OptionChoice option="edfMethods3">
                        <OptionItem option="edfAuto"/>
                        <OptionItem option="edfKm"/>
                        <OptionItem option="edfMkm"/>
                        <OptionItem option="edfStd"/>
                    </OptionChoice>
                    <OptionChoice option="minRiskSize">
                        <OptionItem option="minRiskSizeRelative"/>
                        <OptionItem option="minRiskSizeAbsolute"/>
                    </OptionChoice>
                    <OptionItem option="relativeAlpha"/>
                    <OptionItem option="relativeC"/>
                    <OptionItem option="absoluteSize"/>
                    <OptionItem option="ensureMLEChkbox"/>
                    <OptionItem option="zeroProb"/>
                    <OptionChoice option="maxiterCombo">
                        <OptionItem option="maxiterDefaultChoice"/>
                        <OptionItem option="maxiterCustomChoice"/>
                    </OptionChoice>
                    <OptionItem option="maxiter"/>
                    <OptionChoice option="epsCombo">
                        <OptionItem option="epsDefaultChoice"/>
                        <OptionItem option="epsCustomChoice"/>
                    </OptionChoice>
                    <OptionItem option="epsValue"/>
                </Group>
                <OptionChoice option="varDivisor">
                    <OptionItem option="dof"/>
                    <OptionItem option="numObs"/>
                </OptionChoice>                
            </Group>
            <Group open="true" option="codeGenerationGroup">
                <OptionItem option="procSevselect"/>
                <OptionItem option="procCas"/>
                <OptionItem option="featureNANote"/>
            </Group>
        </Container>

        <Container option="selectionTab"> 
            <Group open="true" option="selectionGroup">
                <OptionChoice option="selectionMethod">
                    <OptionItem option="forwardChoice"/>
                    <OptionItem option="backwardChoice"/>
                    <OptionItem option="stepwiseChoice"/>
                    <OptionItem option="forwardSwapChoice"/>
                    <OptionItem option="noneSelectionChoice"/>
                </OptionChoice>
                <OptionItem option="useIncludeList"/>
                <OptionItem option="includeList"/>
                <OptionChoice option="selectMethod">
                    <OptionItem option="aicChoice"/>
                    <OptionItem option="aiccChoice"/>
                    <OptionItem option="sbcChoice"/>
                </OptionChoice>
                <OptionChoice option="stopMethod">
                    <OptionItem option="aicChoice"/>
                    <OptionItem option="aiccChoice"/>
                    <OptionItem option="sbcChoice"/>
                </OptionChoice>
                <OptionChoice option="chooseMethod">
                    <OptionItem option="aicChoice"/>
                    <OptionItem option="aiccChoice"/>
                    <OptionItem option="sbcChoice"/>
                </OptionChoice>
            </Group>
            <Group option="selectionDetailsGroup">
                <OptionChoice option="detailsCombo">
                    <OptionItem option="summaryDetailsChoice"/>
                    <OptionItem option="stepDetailsChoice"/>
                    <OptionItem option="allDetailsChoice"/> 
                </OptionChoice>
                <OptionChoice option="splitClassCombo">
                    <OptionItem option="entireEffectChoice"/>
                    <OptionItem option="singleDFEffectChoice"/>
                </OptionChoice>
                <OptionItem option="hierarchyLabel"/>
                <OptionItem option="hierarchy"/>
            </Group>
        </Container>

        <Container option="outputTab">  
            <Group open="true" option="outputGroup">
                <OptionItem option="casOutputLibrefNote"/>
                <OptionItem option="outputEST"/>
                <OptionItem option="outputESTName"/>
                <OptionItem option="outputESTCovout"/>
                <OptionItem option="outputOut"/>
                <OptionItem option="outputOutName"/>
                <OptionChoice option="scoringFuncSelect">
                    <OptionItem option="scoringFuncMean"/>
                    <OptionItem option="scoringFuncCDF"/>
                    <OptionItem option="scoringFuncLogCDF"/>
                    <OptionItem option="scoringFuncPDF"/>
                    <OptionItem option="scoringFuncLogPDF"/>
                    <OptionItem option="scoringFuncSDF"/>
                    <OptionItem option="scoringFuncLogSDF"/>
                </OptionChoice>
                <OptionItem option="quantilesTable"/>
                <OptionItem option="includeVarsInstruction"/>
                <OptionItem option="includeAllVars"/>
                <OptionItem option="includeNoVars"/>
                <OptionItem option="includeSelectedVars"/>
                <RoleItem role="copyVariables"/>
                <OptionItem option="outputStore"/>
                <OptionItem option="outputStoreName"/>
                <!--
                <OptionItem option="odsOutputLibrefNote"/>
                <OptionItem option="outputSTAT"/>
                <OptionItem option="outputSTATName"/>
                <OptionItem option="outputCDF"/>
                <OptionItem option="outputCDFName"/>
                <OptionItem option="outputModelInfo"/>
                <OptionItem option="outputModelInfoName"/> -->
            </Group>
        </Container>
            
    </UI>
    <Dependencies>
        <Dependency condition="($leftCensor=='1')">
            <Target action="show" conditionResult="true" option="leftCensorGrp"/>
            <Target action="hide" conditionResult="false" option="leftCensorGrp"/>
        </Dependency>
        <Dependency condition="($leftCensorGrp=='leftCensorVarChoice')">
            <Target action="show" conditionResult="true" option="leftCensorVariable"/>
            <Target action="hide" conditionResult="false" option="leftCensorVariable"/>
        </Dependency>
        <Dependency condition="($leftCensorGrp=='leftCensorValueChoice')">
            <Target action="show" conditionResult="true" option="leftCensorValue"/>
            <Target action="hide" conditionResult="false" option="leftCensorValue"/>
        </Dependency>
        <Dependency condition="($rightCensor=='1')">
            <Target action="show" conditionResult="true" option="rightCensorGrp"/>
            <Target action="hide" conditionResult="false" option="rightCensorGrp"/>
        </Dependency>
        <Dependency condition="($rightCensorGrp=='rightCensorVarChoice')">
            <Target action="show" conditionResult="true" option="rightCensorVariable"/>
            <Target action="hide" conditionResult="false" option="rightCensorVariable"/>
        </Dependency>
        <Dependency condition="($rightCensorGrp=='rightCensorValueChoice')">
            <Target action="show" conditionResult="true" option="rightCensorValue"/>
            <Target action="hide" conditionResult="false" option="rightCensorValue"/>
        </Dependency>
        <Dependency condition="($leftTruncate=='1')">
            <Target action="show" conditionResult="true" option="leftTruncateGrp"/>
            <Target action="hide" conditionResult="false" option="leftTruncateGrp"/>
            <Target action="show" conditionResult="true" option="ltProbObserved"/>
            <Target action="hide" conditionResult="false" option="ltProbObserved"/>
        </Dependency>
        <Dependency condition="($leftTruncateGrp=='leftTruncateVarChoice')">
            <Target action="show" conditionResult="true" option="leftTruncateVariable"/>
            <Target action="hide" conditionResult="false" option="leftTruncateVariable"/>
        </Dependency>
        <Dependency condition="($leftTruncateGrp=='leftTruncateValueChoice')">
            <Target action="show" conditionResult="true" option="leftTruncateValue"/>
            <Target action="hide" conditionResult="false" option="leftTruncateValue"/>
        </Dependency>
        <Dependency condition="($rightTruncate=='1')">
            <Target action="show" conditionResult="true" option="rightTruncateGrp"/>
            <Target action="hide" conditionResult="false" option="rightTruncateGrp"/>
        </Dependency>
        <Dependency condition="($rightTruncateGrp=='rightTruncateVarChoice')">
            <Target action="show" conditionResult="true" option="rightTruncateVariable"/>
            <Target action="hide" conditionResult="false" option="rightTruncateVariable"/>
        </Dependency>
        <Dependency condition="($rightTruncateGrp=='rightTruncateValueChoice')">
            <Target action="show" conditionResult="true" option="rightTruncateValue"/>
            <Target action="hide" conditionResult="false" option="rightTruncateValue"/>
        </Dependency>
        <Dependency condition="($radioModelType=='advancedModel')">
            <Target action="show" conditionResult="true" option="modelBuilder"/>
            <Target action="hide" conditionResult="false" option="modelBuilder"/>
        </Dependency>
        <Dependency condition="(!($leftCensor=='1' || $rightCensor=='1' || $leftTruncate=='1' || $rightTruncate=='1'))">
            <Target action="show" conditionResult="true" option="edfMethods1"/>
            <Target action="hide" conditionResult="false" option="edfMethods1"/>
        </Dependency>
        <Dependency condition="($leftCensor=='1' &amp;&amp; $rightCensor=='1')">
            <Target action="show" conditionResult="true" option="edfMethods2"/>
            <Target action="hide" conditionResult="false" option="edfMethods2"/>
        </Dependency>
        <Dependency condition="(($leftCensor=='1' || $rightCensor=='1' || $leftTruncate=='1' || $rightTruncate=='1') &amp;&amp; !($leftCensor=='1' &amp;&amp; $rightCensor=='1'))">
            <Target action="show" conditionResult="true" option="edfMethods3"/>
            <Target action="hide" conditionResult="false" option="edfMethods3"/>
        </Dependency>
        <Dependency condition="($edfMethods3=='modifiedkm')">
            <Target action="show" conditionResult="true" option="minRiskSize"/>
            <Target action="hide" conditionResult="false" option="minRiskSize"/>
        </Dependency>
        <Dependency condition="($edfMethods3=='modifiedkm' &amp;&amp; $minRiskSize=='minRiskSizeRelative')">
            <Target action="show" conditionResult="true" option="relativeAlpha"/>
            <Target action="hide" conditionResult="false" option="relativeAlpha"/>
            <Target action="show" conditionResult="true" option="relativeC"/>
            <Target action="hide" conditionResult="false" option="relativeC"/>
        </Dependency>
        <Dependency condition="($edfMethods3=='modifiedkm' &amp;&amp; $minRiskSize=='minRiskSizeAbsolute')">
            <Target action="show" conditionResult="true" option="absoluteSize"/>
            <Target action="hide" conditionResult="false" option="absoluteSize"/>
        </Dependency>
        <Dependency condition="($edfMethods2=='turnbull')">
            <Target action="show" conditionResult="true" option="ensureMLEChkbox"/>
            <Target action="hide" conditionResult="false" option="ensureMLEChkbox"/>
        </Dependency>
        <Dependency condition="($edfMethods2=='turnbull' &amp;&amp; $ensureMLEChkbox=='1')">
            <Target action="show" conditionResult="true" option="zeroProb"/>
            <Target action="hide" conditionResult="false" option="zeroProb"/>
        </Dependency>
        <Dependency condition="($edfMethods2=='turnbull')">
            <Target action="show" conditionResult="true" option="maxiterCombo"/>
            <Target action="hide" conditionResult="false" option="maxiterCombo"/>
        </Dependency>
        <Dependency condition="($edfMethods2=='turnbull' &amp;&amp; $maxiterCombo=='maxiterCustomChoice')">
            <Target action="show" conditionResult="true" option="maxiter"/>
            <Target action="hide" conditionResult="false" option="maxiter"/>
        </Dependency>
        <Dependency condition="($edfMethods2=='turnbull')">
            <Target action="show" conditionResult="true" option="epsCombo"/>
            <Target action="hide" conditionResult="false" option="epsCombo"/>
        </Dependency>
        <Dependency condition="($edfMethods2=='turnbull' &amp;&amp; $epsCombo=='epsCustomChoice')">
            <Target action="show" conditionResult="true" option="epsValue"/>
            <Target action="hide" conditionResult="false" option="epsValue"/>
        </Dependency>
        <Dependency condition="($distributionChoiceGrp=='customDistributions')">
            <Target action="show" conditionResult="true" option="distributionList"/>
            <Target action="hide" conditionResult="false" option="distributionList"/>
        </Dependency>
        <Dependency condition="(($distributionChoiceGrp=='customDistributions') &amp;&amp; $distributionList.contains('tweedie') &amp;&amp;     ((($classVariable.size()&gt;0 || $continuousVariable.size()&gt;0) &amp;&amp; $radioModelType=='mainModel') ||              (($classVariable.size()&gt;0 || $continuousVariable.size()&gt;0) &amp;&amp; $radioModelType=='advancedModel' &amp;&amp; $modelBuilder.modelSummaryValues.fixedEffectsCount&gt;0)))">
            <Target action="show" conditionResult="true" option="tweedieDistNote"/>
            <Target action="hide" conditionResult="false" option="tweedieDistNote"/>
        </Dependency>
        <Dependency condition="($nlMaxiterCombo=='maxiterCustomChoice')">
            <Target action="show" conditionResult="true" option="nlMaxiter"/>
            <Target action="hide" conditionResult="false" option="nlMaxiter"/>
        </Dependency>
        <Dependency condition="($statsChoice=='customStatsChoice')">
            <Target action="show" conditionResult="true" option="modelSelection"/>
            <Target action="hide" conditionResult="false" option="modelSelection"/>
            <Target action="show" conditionResult="true" option="distributionInfo"/>
            <Target action="hide" conditionResult="false" option="distributionInfo"/>
            <Target action="show" conditionResult="true" option="distributionParam"/>
            <Target action="hide" conditionResult="false" option="distributionParam"/>
            <Target action="show" conditionResult="true" option="convergenceStatus"/>
            <Target action="hide" conditionResult="false" option="convergenceStatus"/>
            <Target action="show" conditionResult="true" option="optimizationSummary"/>
            <Target action="hide" conditionResult="false" option="optimizationSummary"/>
            <Target action="show" conditionResult="true" option="statisticsOfFit"/>
            <Target action="hide" conditionResult="false" option="statisticsOfFit"/>
            <Target action="show" conditionResult="true" option="parameterEstimates"/>
            <Target action="hide" conditionResult="false" option="parameterEstimates"/>
            <Target action="show" conditionResult="true" option="allFitStatistics"/>
            <Target action="hide" conditionResult="false" option="allFitStatistics"/>
            <Target action="show" conditionResult="true" option="descStats"/>
            <Target action="hide" conditionResult="false" option="descStats"/>
            <Target action="show" conditionResult="true" option="estimationDetails"/>
            <Target action="hide" conditionResult="false" option="estimationDetails"/>
            <Target action="show" conditionResult="true" option="initialValues"/>
            <Target action="hide" conditionResult="false" option="initialValues"/>
            <Target action="show" conditionResult="true" option="optimizationHistory"/>
            <Target action="hide" conditionResult="false" option="optimizationHistory"/>
        </Dependency>
        <Dependency condition="($proc=='procCas')">
            <Target action="show" conditionResult="true" option="featureNANote"/>
            <Target action="hide" conditionResult="false" option="featureNANote"/>
            <Target action="disable" conditionResult="true" option="selectPlotsCombo"/>
            <Target action="enable" conditionResult="false" option="selectPlotsCombo"/>
        </Dependency>
        <Dependency condition="($proc=='procSevselect' &amp;&amp; $selectPlotsCombo=='selectedPlots')">
            <Target action="show" conditionResult="true" option="selPlotsGroup"/>
            <Target action="hide" conditionResult="false" option="selPlotsGroup"/>
        </Dependency>
        <Dependency condition="($proc=='procSevselect' &amp;&amp; $selectPlotsCombo=='selectedPlots' &amp;&amp; ($pdfPlot=='1' || $pdfPlotPerDist=='1'))">
            <Target action="show" conditionResult="true" option="pdfHistogram"/>
            <Target action="hide" conditionResult="false" option="pdfHistogram"/>
            <Target action="show" conditionResult="true" option="pdfKernel"/>
            <Target action="hide" conditionResult="false" option="pdfKernel"/>
        </Dependency>
        <Dependency condition="(!($selectionMethod=='none'))">
            <Target action="show" conditionResult="true" option="selectMethod"/>
            <Target action="hide" conditionResult="false" option="selectMethod"/>
            <Target action="show" conditionResult="true" option="stopMethod"/>
            <Target action="hide" conditionResult="false" option="stopMethod"/>
            <Target action="show" conditionResult="true" option="chooseMethod"/>
            <Target action="hide" conditionResult="false" option="chooseMethod"/>
        </Dependency>        
        <Dependency condition="(!($selectionMethod=='none'))">
            <Target action="show" conditionResult="true" option="selectionDetailsGroup"/>
            <Target action="hide" conditionResult="false" option="selectionDetailsGroup"/>
        </Dependency>
        <Dependency condition="($classVariable.size() &gt; 0 &amp;&amp; !($selectionMethod=='none'))">
            <Target action="show" conditionResult="true" option="splitClassCombo"/>
            <Target action="hide" conditionResult="false" option="splitClassCombo"/>
        </Dependency>
        <Dependency condition="(!($selectionMethod=='none') &amp;&amp; $radioModelType=='advancedModel')">
            <Target action="show" conditionResult="true" option="useIncludeList"/>
            <Target action="hide" conditionResult="false" option="useIncludeList"/>
        </Dependency>
        <Dependency condition="(!($selectionMethod=='none') &amp;&amp; $radioModelType=='advancedModel' &amp;&amp; $useIncludeList=='1')">
            <Target action="show" conditionResult="true" option="includeList"/>
            <Target action="hide" conditionResult="false" option="includeList"/>
        </Dependency>
        <Dependency condition="($outputEST=='1')">
            <Target action="enable" conditionResult="true" option="outputESTName"/>
            <Target action="disable" conditionResult="false" option="outputESTName"/>
        </Dependency>
        <Dependency condition="($outputEST=='1')">
            <Target action="show" conditionResult="true" option="outputESTCovout"/>
            <Target action="hide" conditionResult="false" option="outputESTCovout"/>
        </Dependency>
        <Dependency condition="($outputStore=='1')">
            <Target action="enable" conditionResult="true" option="outputStoreName"/>
            <Target action="disable" conditionResult="false" option="outputStoreName"/>
        </Dependency>
        <Dependency condition="($outputOut=='1')">
            <Target action="enable" conditionResult="true" option="outputOutName"/>
            <Target action="disable" conditionResult="false" option="outputOutName"/>
        </Dependency>
        <Dependency condition="($outputOut=='1')">
            <Target action="show" conditionResult="true" option="scoringFuncSelect"/>
            <Target action="hide" conditionResult="false" option="scoringFuncSelect"/>
        </Dependency>
        <Dependency condition="($outputOut=='1')">
            <Target action="show" conditionResult="true" option="quantilesTable"/>
            <Target action="hide" conditionResult="false" option="quantilesTable"/>
        </Dependency>
        <!-- 17w12 temporary solution: show copyvars when there is a SCALEMODEL statement. Remove this restriction for 17w47 release. -->
        <!-- <Dependency condition="($outputOut=='1' &amp;&amp; ((($classVariable.size()>0 || $continuousVariable.size()>0) &amp;&amp; $radioModelType=='mainModel') || 
            (($classVariable.size()>0 || $continuousVariable.size()>0) &amp;&amp; $radioModelType=='advancedModel' &amp;&amp; $modelBuilder.modelSummaryValues.fixedEffectsCount>0) ||
            $offsetVariable.size()>0))">
            <Target option="includeVarsInstruction" conditionResult="true"  action="show"/>
            <Target option="includeVarsInstruction" conditionResult="false" action="hide"/>
            <Target option="includeVars" conditionResult="true"  action="show"/>
            <Target option="includeVars" conditionResult="false" action="hide"/>
        </Dependency>
        <Dependency condition="($outputOut=='1' &amp;&amp; $includeVars=='includeSelectedVars' &amp;&amp; ((($classVariable.size()>0 || $continuousVariable.size()>0) &amp;&amp; $radioModelType=='mainModel') ||
            (($classVariable.size()>0 || $continuousVariable.size()>0) &amp;&amp; $radioModelType=='advancedModel' &amp;&amp; $modelBuilder.modelSummaryValues.fixedEffectsCount>0) ||
            $offsetVariable.size()>0))">
            <Target option="copyVariables" conditionResult="true"  action="show"/>
            <Target option="copyVariables" conditionResult="false" action="hide"/>       
        </Dependency>        -->
        <Dependency condition="($outputOut=='1')">
            <Target action="show" conditionResult="true" option="includeVarsInstruction"/>
            <Target action="hide" conditionResult="false" option="includeVarsInstruction"/>
            <Target action="show" conditionResult="true" option="includeVars"/>
            <Target action="hide" conditionResult="false" option="includeVars"/>
        </Dependency>
        <Dependency condition="($outputOut=='1' &amp;&amp; $includeVars=='includeSelectedVars')">
            <Target action="show" conditionResult="true" option="copyVariables"/>
            <Target action="hide" conditionResult="false" option="copyVariables"/>
        </Dependency>
        <!--
        <Dependency condition="($outputSTAT=='1')">
            <Target option="outputSTATName" conditionResult="true" action="enable"/>
            <Target option="outputSTATName" conditionResult="false" action="disable"/>
        </Dependency>
        <Dependency condition="($outputCDF=='1')">
            <Target option="outputCDFName" conditionResult="true" action="enable"/>
            <Target option="outputCDFName" conditionResult="false" action="disable"/>
        </Dependency>
        <Dependency condition="($outputModelInfo=='1')">
            <Target option="outputModelInfoName" conditionResult="true" action="enable"/>
            <Target option="outputModelInfoName" conditionResult="false" action="disable"/>
        </Dependency> -->
        
    </Dependencies>
    
    <Requirements> 
        <Requirement condition="(!($dependVariable.size()==0 &amp;&amp; $leftCensor=='0' &amp;&amp; $rightCensor=='0'))">
            <Message>The dependent variable must be specified if no censoring is specified.</Message>
        </Requirement>
        <Requirement condition="(!(($distributionList || !('$!distributionList'=='')) &amp;&amp; $distributionList.size()==0))">
            <Message>Select at least one distribution.</Message>
        </Requirement>
        <Requirement condition="(!($radioModelType=='advancedModel' &amp;&amp; $useIncludeList=='1' &amp;&amp; $includeList.size()=='0'))">
            <Message>Select at least one effect to include in all models.</Message>
        </Requirement>
        <Requirement condition="(!($outputOut=='1' &amp;&amp;             ($quantilesTable.columns.quantilesTable_CDF.isValid==1 &amp;&amp;              $quantilesTable.columns.quantilesTable_Name.isValid==1 &amp;&amp;              ($quantilesTable.columns.quantilesTable_CDF.numValues==0 ||              $quantilesTable.columns.quantilesTable_Name.numValues==0))               &amp;&amp; $scoringFuncSelect.size()==0))">
            <Message>Specify at least one scoring function or quantile.</Message>
        </Requirement>
        <Requirement condition="(!($selectionMethod!='none' &amp;&amp;              !((($classVariable.size()&gt;0 || $continuousVariable.size()&gt;0) &amp;&amp; $radioModelType=='mainModel')             || (($classVariable.size()&gt;0 || $continuousVariable.size()&gt;0) &amp;&amp; $radioModelType=='advancedModel' &amp;&amp; $modelBuilder.modelSummaryValues.fixedEffectsCount&gt;0))))">
            <Message>In order to perform model selection, you need to specify at least one effect for main effects model or custom model.</Message>
        </Requirement>
		<!-- PROC SEVSELECT does not support offset= variable without having any scale model effects -->
        <Requirement condition="(!(!((($classVariable.size()&gt;0 || $continuousVariable.size()&gt;0) &amp;&amp; $radioModelType=='mainModel')    || (($classVariable.size()&gt;0 || $continuousVariable.size()&gt;0) &amp;&amp; $radioModelType=='advancedModel' &amp;&amp; $modelBuilder.modelSummaryValues.fixedEffectsCount&gt;0))    &amp;&amp; $offsetVariable.size()&gt;0))">
            <Message>The SEVSELECT procedure does not support offset variable without any scale model effects.</Message>
        </Requirement>
    </Requirements>
    
    <CodeTemplate>
        <![CDATA[
#macro(GenerateEffect $modelEffect $numNestedLevels)
## $numNestedLevels can be 'all' or 'one'.  One extracts only the lowest-level of the hierarchy
## if the effectType is 'nested', then this is a nested effect
    #if($modelEffect.effectType == 'nested')
        ## Handle nested effects in UI5
        #if($modelEffect.levelInclusionIndices.size() > 0)
            ## Extract nested effects for all levels of the hierarchy
            #if($numNestedLevels == 'all')
                #foreach($layerNum in $modelEffect.levelInclusionIndices)
                    ## extract outer terms (remember indexing in hierarchyTerms starts at 0)
                    #set($outerTerm = $modelEffect.hierarchyTerms[$layerNum])
                    #foreach($subitem1 in $outerTerm)
$CTMUtil.toSASName($subitem1)#if($foreach.count < $outerTerm.size())*#end#end
(#foreach($subterm2 in $modelEffect.hierarchyTerms)
                        #if($foreach.index < $layerNum)
#foreach($subitem2 in $subterm2)
$CTMUtil.toSASName($subitem2)#if($foreach.count < $subterm2.size())*#end#end#if($foreach.index < ($layerNum) - 1) #end
                        #end
                    #end)
                #end
            ## Extract nested effects for only the lowest level of the hierarchy (for subject and group effects)
            #elseif($numNestedLevels == 'one')
                ## Outer term corresponds to the last (lowest) in the hierarchy
                #set($layerNum =  $modelEffect.levelInclusionIndices[$MathTool.sub($modelEffect.levelInclusionIndices.size(), 1)])
                #set($outerTerm = $modelEffect.hierarchyTerms[$layerNum])
                #foreach($subitem1 in $outerTerm)
$CTMUtil.toSASName($subitem1)#if($foreach.count < $outerTerm.size())*#end#end
(#foreach($subterm2 in $modelEffect.hierarchyTerms)
                    #if($foreach.index < $layerNum)
#foreach($subitem2 in $subterm2)
$CTMUtil.toSASName($subitem2)#if($foreach.count < $subterm2.size())*#end#end#if($foreach.index < ($layerNum) - 1) #end
                    #end
                #end)
            #end

        ## Handle pre-UI5 nested effects
        #elseif($modelEffect.memberSet1.size() > 0)
            ## extract outer terms
            #foreach($subitem1 in $modelEffect.memberSet1)
$CTMUtil.toSASName($subitem1)#if($foreach.count < $modelEffect.memberSet1.size())*#end#end
(#foreach($subitem2 in $modelEffect.memberSet2)
$CTMUtil.toSASName($subitem2)#if($foreach.count < $modelEffect.memberSet2.size())*#end#end)
        #end
## handle 'main' or 'interaction' effects
    #else
        ## Extract effects from memberSet1
        #foreach($subitem in $modelEffect.memberSet1)
$CTMUtil.toSASName($subitem)#if($foreach.count < $modelEffect.memberSet1.size())*#end#end
    #end
#end

#macro(GenerateEffectCAS $modelEffect $numNestedLevels)
## $numNestedLevels can be 'all' or 'one'.  One extracts only the lowest-level of the hierarchy
## if the effectType is 'nested', then this is a nested effect
    #if($modelEffect.effectType == 'nested')
        ## Handle nested effects in UI5
        #if($modelEffect.levelInclusionIndices.size() > 0)
            ## Extract nested effects for all levels of the hierarchy
            #if($numNestedLevels == 'all')
                #foreach($layerNum in $modelEffect.levelInclusionIndices)
                    ## extract outer terms (remember indexing in hierarchyTerms starts at 0)
                    #set($outerTerm = $modelEffect.hierarchyTerms[$layerNum])
                    {vars={
					#foreach($subitem1 in $outerTerm)
$CTMUtil.doubleQuoteString($subitem1)#if($foreach.count < $outerTerm.size()),#end#end}, nest={
#foreach($subterm2 in $modelEffect.hierarchyTerms)
						#if($foreach.index < $layerNum)
#foreach($subitem2 in $subterm2)
$CTMUtil.doubleQuoteString($subitem2)#if($foreach.count < $subterm2.size()),#end#end#if($foreach.index < ($layerNum) - 1),#end
                        #end
                    #end}#if($outerTerm.size()>1), interaction="CROSS"#end}
					#if($foreach.hasNext),#end
                #end
            ## Extract nested effects for only the lowest level of the hierarchy (for subject and group effects)
            #elseif($numNestedLevels == 'one')
                ## Outer term corresponds to the last (lowest) in the hierarchy
                #set($layerNum =  $modelEffect.levelInclusionIndices[$MathTool.sub($modelEffect.levelInclusionIndices.size(), 1)])
                #set($outerTerm = $modelEffect.hierarchyTerms[$layerNum])
				{vars={
                #foreach($subitem1 in $outerTerm)
$CTMUtil.doubleQuoteString($subitem1)#if($foreach.count < $outerTerm.size()),#end#end}, nest={
#foreach($subterm2 in $modelEffect.hierarchyTerms)
                    #if($foreach.index < $layerNum)
#foreach($subitem2 in $subterm2)
$CTMUtil.doubleQuoteString($subitem2)#if($foreach.count < $subterm2.size()),#end#end#if($foreach.index < ($layerNum) - 1), #end
                    #end
                #end}#if($outerTerm.size()>1), interaction="CROSS"#end}
            #end
			
        ## Handle pre-UI5 nested effects
        #elseif($modelEffect.memberSet1.size() > 0)
            ## extract outer terms
			{vars={#foreach($subitem1 in $modelEffect.memberSet1)
$CTMUtil.doubleQuoteString($subitem1)#if($foreach.hasNext),#end#end}, nest={#foreach($subitem2 in $modelEffect.memberSet2)
$CTMUtil.doubleQuoteString($subitem2)#if($foreach.hasNext),#end#end}#if($modelEffect.memberSet1.size()>1), interaction="CROSS"#end}
		#end
## handle 'main' or 'interaction' effects
    #else
		#if($modelEffect.effectType == 'interaction') ## 'interaction' effects
			{vars={
			## Extract effects from memberSet1
			#foreach($subitem in $modelEffect.memberSet1)
$CTMUtil.doubleQuoteString($subitem)#if($foreach.count < $modelEffect.memberSet1.size()),#end#end}, interaction="CROSS"}
		#elseif($modelEffect.effectType == 'main') ## 'main' effects
			{vars={
			#foreach($subitem in $modelEffect.memberSet1)
$CTMUtil.doubleQuoteString($subitem)#if($foreach.count < $modelEffect.memberSet1.size()),#end#end}}
		#end
    #end
#end

#if($modelSelection=='1' || $distributionInfo=='1' || $distributionParam=='1' || $convergenceStatus=='1' || $optimizationSummary=='1' || $statisticsOfFit=='1' || 
	$parameterEstimates=='1' || $allFitStatistics=='1' || $descStats=='1' || $estimationDetails=='1' || $initialValues=='1' || $optimizationHistory=='1')
    #set($statsSelected=1)
#else #set($statsSelected=0)
#end
#if($modelSelection=='1' && $distributionInfo=='1' && $distributionParam=='1' && $convergenceStatus=='1' && $optimizationSummary=='1' && $statisticsOfFit=='1' && 
	$parameterEstimates=='1' && $allFitStatistics=='1' && $descStats=='1' && $estimationDetails=='1' && $initialValues=='1' && $optimizationHistory=='1')
    #set($allStatsSelected=1)
#else #set($allStatsSelected=0)
#end

ods noproctitle;

### scalemodel statement needed?
#set($scaleModelNeeded=0)
#if(($classVariable.size()>0 || $continuousVariable.size()>0) && $radioModelType=='mainModel')
#set($scaleModelNeeded=1)
#end
#if(($classVariable.size()>0 || $continuousVariable.size()>0) && $radioModelType=='advancedModel' && $modelBuilder.modelSummaryValues.fixedEffectsCount>0)
#set($scaleModelNeeded=1)
#end

## quantiles table - only records with non-empty name and non-null CDF value are added to the list
#set($_quantileValues=[])
#foreach($item in $quantilesTable.rows.values)
    #if (!("$!item.quantilesTable_CDF"=="") && !("$!item.quantilesTable_Name"==""))  ## only non-null and non-empty values allowed
        #set($_dummy=$_quantileValues.add([$item.quantilesTable_CDF, $item.quantilesTable_Name]))
    #end
#end

## plots= statement
#set($plotStmt="
#if($selectPlotsCombo=='allPlots') plots=all 
#elseif($selectPlotsCombo=='noPlots') plots=none
#elseif($selectPlotsCombo=='defaultPlots') plots(histogram kernel)=(cdf pdf)
#elseif($selectPlotsCombo=='selectedPlots')
	#if($cdfPlot=='1' || $cdfPlotPerDist=='1' || $pdfPlot=='1' || $pdfPlotPerDist=='1' || $ppPlot=='1' || $qqPlot=='1')
		plots(only #if($pdfHistogram=='1')histogram#end #if($pdfKernel=='1')kernel#end)=( 
		#if($cdfPlot=='1') cdf #end
		#if($cdfPlotPerDist=='1') cdfperdist #end
		#if($pdfPlot=='1') pdf #end
		#if($pdfPlotPerDist=='1') pdfperdist #end
		#if($ppPlot=='1') pp #end
		#if($qqPlot=='1') qq #end
		)
	#else plots=none
	#end
#end
")

############## proc sevselect code ##############
#if($proc == 'procSevselect')
proc sevselect data=$dataset #if($dataset.getWhereClause()!="") (where=($dataset.getWhereClause())) #end vardef=$varDivisor
#if($edfMethods1)
    empiricalcdf=standard
#elseif($edfMethods2)
    empiricalcdf=$edfMethods2
#elseif($edfMethods3)
    empiricalcdf=$edfMethods3
#end
#if($edfMethods3 && $edfMethods3=='modifiedkm')
    #if(($minRiskSize=='minRiskSizeRelative' && ($relativeAlpha!='' || $relativeC!='')) || ($minRiskSize=='minRiskSizeAbsolute' && $absoluteSize!=''))
        (#if($minRiskSize=='minRiskSizeRelative')
            #if($relativeC!='') c=$relativeC #end #if($relativeAlpha!='') alpha=$relativeAlpha #end
        #else
            #if($absoluteSize!='') rslb=$absoluteSize #end
        #end)
    #end
#end
#if($edfMethods2 && $edfMethods2=='turnbull')
    #if($ensureMLEChkbox=='1' || $maxiterCombo=='maxiterCustomChoice' || $epsCombo=='epsCustomChoice')
        (#if($ensureMLEChkbox=='1') ensuremle zeroprob=$zeroProb #end 
         #if($maxiterCombo=='maxiterCustomChoice') maxiter=$maxiter #end
         #if($epsCombo=='epsCustomChoice') eps=$epsValue #end
        )
    #end
#end
#if($statsChoice=='noneChoice') print=none
#elseif($statsChoice=='allStatsChoice') print=all
#elseif($statsChoice=='customStatsChoice')
	#if($allStatsSelected=='1') print=all
	#else
		#if($statsSelected=='1') 
			#if($distributionParam!='1' && $classVariable.size()==0) print(only)=(
				#if($modelSelection=='1') selection #end #if($distributionInfo=='1') distinfo #end
				#if($convergenceStatus=='1') convstatus #end #if($optimizationSummary=='1') nlosummary #end #if($statisticsOfFit=='1') statistics #end 
				#if($parameterEstimates=='1') estimates #end #if($allFitStatistics=='1') allfitstats #end #if($descStats=='1') descstats #end 
				#if($estimationDetails=='1') estimationdetails #end	#if($initialValues=='1') initialvalues #end #if($optimizationHistory=='1') nlohistory #end)
			#else print=all
			#end
		#else
			print=none
		#end
	#end
#end
$plotStmt
#if($outputESTName) outest=$outputESTName #if($outputESTCovout=='1') covout #end #end
#if($outputStoreName) outstore=$outputStoreName #end;

## BY statement
#if($byVariable.size()>0)
    by #foreach($item in $byVariable) $item #end;
#end

## LOSS statement    
loss #foreach($item in $dependVariable) $item #end / 
    #if($leftCensor=='1') leftcensored=#if($leftCensorGrp=='leftCensorVarChoice') #foreach($item in $leftCensorVariable) $item #end #elseif($leftCensorGrp=='leftCensorValueChoice') $leftCensorValue #end #end
    #if($rightCensor=='1') rightcensored=#if($rightCensorGrp=='rightCensorVarChoice') #foreach($item in $rightCensorVariable) $item #end #elseif($rightCensorGrp=='rightCensorValueChoice') $rightCensorValue #end #end
    #if($leftTruncate=='1') lefttruncated=#if($leftTruncateGrp=='leftTruncateVarChoice') #foreach($item in $leftTruncateVariable) $item #end #elseif($leftTruncateGrp=='leftTruncateValueChoice') $leftTruncateValue #end#if($ltProbObserved!='')(probobserved=$ltProbObserved)#end#end
    #if($rightTruncate=='1') righttruncated=#if($rightTruncateGrp=='rightTruncateVarChoice') #foreach($item in $rightTruncateVariable) $item #end #elseif($rightTruncateGrp=='rightTruncateValueChoice') $rightTruncateValue #end #end;
    dist #if($distributionChoiceGrp=='predefDistributions') _predefined_ 
    #elseif($distributionChoiceGrp=='allDistributions') _all_ 
    #elseif($distributionChoiceGrp=='customDistributions') #foreach($item in $distributionList) $item #end
    #end;

## CLASS statement before SCALEMODEL statement
#if($classVariable.size()>0) class #foreach($item in $classVariable) $item #end
    #if($splitClassCombo=='singleDFEffectChoice') / split #end
; 
#end

## SCALEMODEL statement
#if($scaleModelNeeded=='1') scalemodel
    #if($radioModelType=='mainModel')
        #foreach($item in $continuousVariable) $item #end #foreach($item in $classVariable) $item #end
    #elseif($radioModelType=='advancedModel')
        #if($modelBuilder.mixedEffectsModels)
            #foreach($model in $modelBuilder.mixedEffectsModels)
                #if($model.emtype=='FIXED')
                    #if($model.modelEffects.size() > 0)
                        #foreach($modelEffect in $model.modelEffects)
                            #GenerateEffect($modelEffect 'all')
                        #end
                    #end
                #end
            #end
        #end ##end #if($modelBuilder.mixedEffectsModels)
    #end
    #if((!($selectionMethod=='none') && $useIncludeList=='1' && $includeList.size()>0) || $offsetVariable.size()>0)
        / 
        #if(!($selectionMethod=='none') && $useIncludeList=='1' && $includeList.size()>0)
            include=(#foreach($modelEffect in $includeList) #GenerateEffect($modelEffect 'all') #end)
        #end
        #if($offsetVariable.size()>0)
            offset=#foreach($item in $offsetVariable) $item #end
        #end
    #end    
;
#end

## SELECTION statement
#if(!($selectionMethod=='none'))
    selection method=$selectionMethod(select=$selectMethod stop=$stopMethod choose=$chooseMethod)
    #if($hierarchy=='1') hierarchy=single
    #else hierarchy=none
    #end  
    #if(!($detailsCombo=='summary')) details=$detailsCombo #end
;
#end

## OUTPUT statement is generated only when scoring functions or quantiles are specified.
#if($outputOutName && (($scoringFuncSelect && $scoringFuncSelect.size() > 0) || $_quantileValues.size()>0)) output out=$outputOutName
    #if($scoringFuncSelect && $scoringFuncSelect.size() > 0)
        functions=(#foreach($item in $scoringFuncSelect) $item #end)
    #end
    #if($_quantileValues.size()>0) 
        quantiles=(cdf=#foreach($item in $_quantileValues) $item[0] #end
            names=(#foreach($item in $_quantileValues) $CTMUtil.toSASName($item[1]) #end)
        )
    #end
    #if($includeVars=='includeAllVars') copyvars=(_all_)
    #elseif($includeVars=='includeSelectedVars')
        #if($copyVariables.size() > 0) copyvars=(#foreach($item in $copyVariables) $item#end)#end
    #end;
#end

## NLOPTIONS statement
#if($nlMethod!='trureg' || $nlMaxiterCombo=='maxiterCustomChoice')
    nloptions #if($nlMethod!='trureg') tech=$nlMethod #end #if($nlMaxiterCombo=='maxiterCustomChoice') maxiter=$nlMaxiter #end;
#end

## WEIGHT statement
#if($weightVariable.size()>0)
    weight #foreach($item in $weightVariable) $item #end;
#end

## ODS select
#if($statsChoice=='customStatsChoice')
    #if($allStatsSelected!='1' && $statsSelected=='1' && ($distributionParam=='1' || $classVariable.size()>0)) ods select
        #if($modelSelection=='1') ModelSelection #end #if($distributionInfo=='1') DistributionInfo #end #if($distributionParam=='1') Distribution #end
		#if($convergenceStatus=='1') ConvergenceStatus #end #if($optimizationSummary=='1') OptimizationSummary #end #if($statisticsOfFit=='1') FitStatistics #end 
		#if($parameterEstimates=='1') ParameterEstimates #end #if($allFitStatistics=='1') AllFitStatistics #end #if($descStats=='1') RegDescStats #end 
		#if($estimationDetails=='1') EstimationDetails #end	#if($initialValues=='1') InitialValues #end #if($optimizationHistory=='1') IterationHistory #end
		#if(!($selectionMethod=='none')) SelectionInfo SelectionSummary StopReason SelectionReason SelectedEffects #if(!($detailsCombo=='summary')) EntryCandidates RemovalCandidates #end#end
		#if($classVariable.size()>0) ClassLevels #end
		#if($selectPlotsCombo=='allPlots') CDFPlot CDFDistPlot PDFPlot PDFDistPlot PPPlot QQPlot
		#elseif($selectPlotsCombo=='defaultPlots') CDFPlot PDFPlot
		#elseif($selectPlotsCombo=='selectedPlots')
			#if($cdfPlot=='1') CDFPlot #end	#if($cdfPlotPerDist=='1') CDFDistPlot #end
			#if($pdfPlot=='1') PDFPlot #end	#if($pdfPlotPerDist=='1') PDFDistPlot #end
			#if($ppPlot=='1') PPPlot #end #if($qqPlot=='1') QQPlot #end
		#end;
    #end
#end

run;
#end

############## PROC CAS ##############
#if($proc == 'procCas')

#set($dataSASLib=$dataset.getLibrary())
#set($dataSASTable=$dataset.get("table"))
#set($estimateDSSASLib=$outputESTName.getLibrary())  ## estimate data set CAS engine libref
#set($estimateDSSASTable=$outputESTName.get("table"))  ## estimate data set name
#set($outputOutSASLib=$outputOutName.getLibrary())
#set($outputOutSASTable=$outputOutName.get("table"))
#set($storeDSSASLib=$outputStoreName.getLibrary())  ## severity model data set CAS engine libref
#set($storeDSSASTable=$outputStoreName.get("table"))  ## severity model data set name

#set($casModelEffects="
#if($modelBuilder && $modelBuilder.mixedEffectsModels)
	effects={
    #foreach($model in $modelBuilder.mixedEffectsModels)
        #if($model.emtype=='FIXED')
            #if($model.modelEffects.size()>0)
                #foreach($modelEffect in $model.modelEffects)
					#GenerateEffectCAS($modelEffect 'all')#if($foreach.hasNext),#end
                #end
            #end
        #end
    #end    ## end #foreach($model in $modelBuilder.mixedEffectsModels)
	}
#else
	effects={{vars={
    #foreach($item in $continuousVariable) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext || $classVariable.size()>0),#end#end
    #foreach($item in $classVariable) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext),#end#end
	}}}
#end
")

#if(!($selectionMethod=='none') && $useIncludeList=='1' && $includeList.size()>0)
#set($casIncludeEffects="{
	#foreach($modelEffect in $includeList) #GenerateEffectCAS($modelEffect 'all') #end
}")
#end

/* $commentMacro */
#### Macro to check the existence of the 'svrtdist' CAS table and load it if not available
%macro loadSVRTDIST;
proc cas;
	session %sysfunc(getlsessref($dataSASLib));
	unset logs;
	loaded = 0;
	/* $commentSvrtdistLoaded */
	#### Check if 'svrtdist' is already loaded
	tableExists result=r / name="svrtdist";
	if (r.exists ne 0) then loaded = 1;
        else do;
            /* $commentSampleCaslib */
			#### Try to load 'svrtdist' from the 'samples' caslib
            c = 'samples';
            queryCaslib result=r / caslib=c;
            if (r[c]) then do;
                loadtable status=s / caslib=c path="predef_svrtdist.sashdat" casout="svrtdist";
                if (s.statusCode = 0) then loaded = 1;
            end;
            if (loaded = 0) then do;
                /* $commentPublicCaslib */
				#### Try to load 'svrtdist' from the 'public' caslib
                c = 'public';
                queryCaslib result=r / caslib=c;
                if (r[c]) then do;
                    loadtable status=s / caslib=c path="predef_svrtdist.sashdat" casout="svrtdist";
                    if (s.statusCode = 0) then loaded = 1;
                end;
            end;
        end;
        call symputx('predefLoaded', loaded, 'l');
        set logs;
    run;
    quit;

    %if &predefLoaded=0 %then %do;
        /* $commentRunSevselect */
		#### If 'svrtdist' could not be loaded from a caslib, create it by using PROC SEVSELECT
        proc sevselect;
            dist _predefined_ tweedie stweedie / validateonly(noscalemodel);
        run;
    %end;
%mend;

%loadSVRTDIST;

proc cas;
	session %sysfunc(getlsessref($dataSASLib));
	action severity.severity / 
		table={name="$dataSASTable"	caslib="%sysfunc(getlcaslib($dataSASLib))" #if($dataset.getWhereClause()!="") where=$CTMUtil.doubleQuoteString($dataset.getWhereClause()) #end	
			#if($byVariable.size()>0) groupby={#foreach($item in $byVariable){name=$CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext), #end}#end} #end}
		## LOSS statement
		lossvariables={#if($dependVariable.size()>0) {name=#foreach($item in $dependVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="target"}#end
			#if($leftCensor=='1' && $leftCensorGrp=='leftCensorVarChoice') {name=#foreach($item in $leftCensorVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="lc"}#end
			#if($rightCensor=='1' && $rightCensorGrp=='rightCensorVarChoice') {name=#foreach($item in $rightCensorVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="rc"}#end
			#if($leftTruncate=='1' && $leftTruncateGrp=='leftTruncateVarChoice') {name=#foreach($item in $leftTruncateVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="lt"}#end
			#if($rightTruncate=='1' && $rightTruncateGrp=='rightTruncateVarChoice') {name=#foreach($item in $rightTruncateVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="rt"}#end
		}
		#if(($leftCensor=='1' && $leftCensorGrp=='leftCensorValueChoice') || ($rightCensor=='1' && $rightCensorGrp=='rightCensorValueChoice') || ($leftTruncate=='1' && $leftTruncateGrp=='leftTruncateValueChoice') || ($rightTruncate=='1' && $rightTruncateGrp=='rightTruncateValueChoice'))
			ctlimits={#if($leftCensor=='1' && $leftCensorGrp=='leftCensorValueChoice'){role="lc" limit=$leftCensorValue} #end
			#if($rightCensor=='1' && $rightCensorGrp=='rightCensorValueChoice'){role="rc" limit=$rightCensorValue} #end
			#if($leftTruncate=='1' && $leftTruncateGrp=='leftTruncateValueChoice'){role="lt" limit=$leftTruncateValue} #end
			#if($rightTruncate=='1' && $rightTruncateGrp=='rightTruncateValueChoice'){role="rt" limit=$rightTruncateValue} #end}
		#end
		#if($leftTruncate=='1' && $ltProbObserved!='') probobserved=$ltProbObserved #end
		funcdef={name="svrtdist"} 
		distributions={#if($distributionChoiceGrp=='predefDistributions') "burr" "exp" "gamma" "igauss" "logn" "pareto" "gpd" "weibull"
			#elseif($distributionChoiceGrp=='allDistributions') "burr" "exp" "gamma" "igauss" "logn" "pareto" "gpd" "stweedie" "tweedie" "weibull"
			#elseif($distributionChoiceGrp=='customDistributions') #foreach($item in $distributionList) "$item" #end
			#end
		}
		## CLASS statement before SCALEMODEL statement
		#if($classVariable.size()>0) class={{vars={#foreach($item in $classVariable) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext),#end#end}
			#if($splitClassCombo=='singleDFEffectChoice') split=true #end
		}}#end
		#if($scaleModelNeeded=='1') scalemodel={$casModelEffects
			#if($offsetVariable.size()>0) offset=#foreach($item in $offsetVariable) $CTMUtil.doubleQuoteString($item.get('value')) #end#end
			#if(!($selectionMethod=='none') && $useIncludeList=='1' && $includeList.size()>0) include=$casIncludeEffects #end
		}
		#end
		## SELECTION statement
		#if(!($selectionMethod=='none'))
			selection={method="$selectionMethod" select="$selectMethod" stop="$stopMethod" choose="$chooseMethod"
			#if($hierarchy=='1') hierarchy="single" #else hierarchy="none" #end  
			#if(!($detailsCombo=='summary')) details="$detailsCombo" #end
			}
		#end

		
		#if($statsChoice=='noneChoice') display={excludeall=true suppresswarnings=true}
		#elseif($statsChoice=='allStatsChoice') 
			display={names={"OutputCasTables" "DataSet" "DistributionInfo" "/DescStats/" "ClassLevels" "ModelSelection" "Distribution" "InitialValues" 
				"ConvergenceStatus" "FitStatistics" "ParameterEstimates" "OptimizationSummary" "IterationHistory" "AllFitStatistics" "/EstimationDetails/" 
				"Timing" "/Candidates/" "SelectionInfo" "SelectionSummary" "SelectionReason" "SelectedEffects" "StopReason"} suppresswarnings=true}
		#elseif($statsChoice=='defaultStatsChoice') 
			display={names={"OutputCasTables" "DataSet" #if($classVariable.size()>0) "ClassLevels" #end "ModelSelection" "Distribution" 
				"ConvergenceStatus" "FitStatistics" "ParameterEstimates" "OptimizationSummary"
				#if(!($selectionMethod=='none')) #if(!($detailsCombo=='summary')) "/Candidates/" #end "SelectionInfo" "SelectionSummary" "SelectionReason" "SelectedEffects" "StopReason" #end
				} suppresswarnings=true}
		#elseif($statsChoice=='customStatsChoice')
			#if($allStatsSelected=='1') 
				display={names={"OutputCasTables" "DataSet" "DistributionInfo" "/DescStats/" "ClassLevels" "ModelSelection" "Distribution" "InitialValues" 
				"ConvergenceStatus" "FitStatistics" "ParameterEstimates" "OptimizationSummary" "IterationHistory" "AllFitStatistics" "/EstimationDetails/" 
				"Timing" "/Candidates/" "SelectionInfo" "SelectionSummary" "SelectionReason" "SelectedEffects" "StopReason"} suppresswarnings=true}
			#else
				#if($statsSelected=='1') 
					display={names={#if($modelSelection=='1') "ModelSelection" #end #if($distributionParam=='1') "Distribution" #end 
						#if($convergenceStatus=='1') "ConvergenceStatus" #end #if($statisticsOfFit=='1') "FitStatistics" #end
						#if($parameterEstimates=='1') "ParameterEstimates" #end #if($distributionInfo=='1') "DistributionInfo" #end
						#if($allFitStatistics=='1') "AllFitStatistics" #end #if($descStats=='1') "/DescStats/" #end
						#if($estimationDetails=='1') "/EstimationDetails/" #end #if($initialValues=='1') "InitialValues" #end
						#if($optimizationSummary=='1') "OptimizationSummary" #end #if($optimizationHistory=='1') "IterationHistory" #end
						#if($classVariable.size()>0) "ClassLevels" #end
						#if(!($selectionMethod=='none')) #if(!($detailsCombo=='summary')) "/Candidates/" #end "SelectionInfo" "SelectionSummary" "SelectionReason" "SelectedEffects" "StopReason" #end
						} suppresswarnings=true}
				#else
					display={excludeall=true suppresswarnings=true}
				#end
			#end
		#end
		
		## document default outDetailLevel=1; severity action default 0
		outDetailLevel=0
		empiricalcdf={method=#if($edfMethods1) "standard" #elseif($edfMethods2) "$edfMethods2" #elseif($edfMethods3) "$edfMethods3" #end
			#if($edfMethods3 && $edfMethods3=='modifiedkm')
				#if($minRiskSize=='minRiskSizeRelative' && ($relativeAlpha!='' || $relativeC!=''))
					#if($relativeC!='') risksetlowerboundc=$relativeC #end #if($relativeAlpha!='') risksetlowerboundalpha=$relativeAlpha #end
				#end
				#if($minRiskSize=='minRiskSizeAbsolute' && $absoluteSize!='')
					risksetlowerbound=$absoluteSize
				#end
			#end
			#if($edfMethods2 && $edfMethods2=='turnbull')
				#if($ensureMLEChkbox=='1') turnbullensuremle=true turnbullzeroprob=$zeroProb #end 
				#if($maxiterCombo=='maxiterCustomChoice') turnbullmaxiter=$maxiter #end
				#if($epsCombo=='epsCustomChoice') turnbullmaxerror=$epsValue #end
			#end
		}
		estimation={varianceDivisor="$varDivisor" #if($nlMethod!='trureg') technique="$nlMethod" #end #if($nlMaxiterCombo=='maxiterCustomChoice') maxiter=$nlMaxiter #end}
		#if($outputESTName) 
			outest={table={name="$estimateDSSASTable" caslib="%sysfunc(getlcaslib($estimateDSSASLib))" replace=true #if($outputESTCovout=='1') covout=true #end}}
		#end
		## OUTPUT statement is generated only when scoring functions or quantiles are specified.
		#if($outputOutName && (($scoringFuncSelect && $scoringFuncSelect.size() > 0) || $_quantileValues.size()>0))
			output={casOut={name="$outputOutSASTable" caslib="%sysfunc(getlcaslib($outputOutSASLib))" replace=true}
			#if($scoringFuncSelect && $scoringFuncSelect.size()>0)
				scorefunctions={#foreach($item in $scoringFuncSelect) sfunc={name="$item"} #end}
			#end
			#if($_quantileValues.size()>0) 
				quantiles={points={#foreach($item in $_quantileValues) {p=$item[0]} #end}
					names={#foreach($item in $_quantileValues) $CTMUtil.doubleQuoteString($CTMUtil.toSASName($item[1])) #end}
					ndecimal=3
				}
			#end
			#if($includeVars=='includeAllVars') copyvars="all"
			#elseif($includeVars=='includeSelectedVars')
				#if($copyVariables.size()>0) copyvars={#foreach($item in $copyVariables) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext),#end#end}#end
			#end
			}
		#end
		#if($outputStoreName) store={name="$storeDSSASTable" caslib="%sysfunc(getlcaslib($storeDSSASLib))" replace=true} #if($outputESTCovout=='1') storecovariance=true #else storecovariance=false #end #end
		## WEIGHT statement
		#if($weightVariable.size()>0) weight=#foreach($item in $weightVariable) $CTMUtil.doubleQuoteString($item.get('value')) #end #end		
;
run;
quit;
			
#end
]]>
    </CodeTemplate>
<TemplateValues version="7.3">
<![CDATA[
{"dataset":{"librarytable":"CASUSER.PURE_PREMIUM"},"dependVariable":"json:[{\"value\":\"avg_claim\",\"type\":\"Numeric\",\"length\":8,\"format\":\"\",\"informat\":\"\",\"className\":\"RoleObject\"}]","continuousVariable":"","classVariable":"","weightVariable":"","byVariable":"","offsetVariable":"","leftCensorVariable":"","rightCensorVariable":"","leftTruncateVariable":"","rightTruncateVariable":"","copyVariables":"","leftCensor":"0","leftCensorVarChoice":"1","leftCensorGrp":"leftCensorVarChoice","leftCensorValueChoice":"0","leftCensorValue":"","rightCensor":"0","rightCensorVarChoice":"1","rightCensorGrp":"rightCensorVarChoice","rightCensorValueChoice":"0","rightCensorValue":"","leftTruncate":"0","leftTruncateVarChoice":"1","leftTruncateGrp":"leftTruncateVarChoice","leftTruncateValueChoice":"0","leftTruncateValue":"","ltProbObserved":"","rightTruncate":"0","rightTruncateVarChoice":"1","rightTruncateGrp":"rightTruncateVarChoice","rightTruncateValueChoice":"0","rightTruncateValue":"","predefDistributions":"1","distributionChoiceGrp":"predefDistributions","allDistributions":"0","customDistributions":"0","distributionList":[{"value":"burr","displayValue":"Burr","keys":["burrDistribution","burr","Burr"],"label":"Burr","baseid":"{\"value\":\"burr\",\"label\":\"Burr\"}","id":"{\"value\":\"burr\",\"label\":\"Burr\"}1"},{"value":"exp","displayValue":"Exponential","keys":["expDistribution","exp","Exponential"],"label":"Exponential","baseid":"{\"value\":\"exp\",\"label\":\"Exponential\"}","id":"{\"value\":\"exp\",\"label\":\"Exponential\"}1"},{"value":"gamma","displayValue":"Gamma","keys":["gammaDistribution","gamma","Gamma"],"label":"Gamma","baseid":"{\"value\":\"gamma\",\"label\":\"Gamma\"}","id":"{\"value\":\"gamma\",\"label\":\"Gamma\"}1"},{"value":"gpd","displayValue":"Generalized Pareto","keys":["genParetoDistribution","gpd","Generalized Pareto"],"label":"Generalized Pareto","baseid":"{\"value\":\"gpd\",\"label\":\"Generalized Pareto\"}","id":"{\"value\":\"gpd\",\"label\":\"Generalized Pareto\"}1"},{"value":"igauss","displayValue":"Inverse Gaussian","keys":["invGuassDistribution","igauss","Inverse Gaussian"],"label":"Inverse Gaussian","baseid":"{\"value\":\"igauss\",\"label\":\"Inverse Gaussian\"}","id":"{\"value\":\"igauss\",\"label\":\"Inverse Gaussian\"}1"},{"value":"logn","displayValue":"Lognormal","keys":["lognDistribution","logn","Lognormal"],"label":"Lognormal","baseid":"{\"value\":\"logn\",\"label\":\"Lognormal\"}","id":"{\"value\":\"logn\",\"label\":\"Lognormal\"}1"},{"value":"pareto","displayValue":"Pareto","keys":["paretoDistribution","pareto","Pareto"],"label":"Pareto","baseid":"{\"value\":\"pareto\",\"label\":\"Pareto\"}","id":"{\"value\":\"pareto\",\"label\":\"Pareto\"}1"},{"value":"weibull","displayValue":"Weibull","keys":["weibullDistribution","weibull","Weibull"],"label":"Weibull","baseid":"{\"value\":\"weibull\",\"label\":\"Weibull\"}","id":"{\"value\":\"weibull\",\"label\":\"Weibull\"}1"}],"mainModel":"1","radioModelType":"mainModel","advancedModel":"0","modelBuilder":{"modelSummaryValues":{"randomEffectsSetCount":0,"repeatedEffectsSetCount":0,"zeroInflatedEffectsSetCount":0,"zeroInflatedEffectsCount":0,"fixedEffectsCount":0,"fixedContinuousMainEffectsCount":0,"fixedClassificationMainEffectsCount":0,"fixedInterceptValue":null,"fixedModelsetInvalidStateCount":0,"randomModelsetInvalidStateCount":0,"repeatedModelsetInvalidStateCount":0,"meansModelsetInvalidStateCount":0,"zeroInflatedModelsetInvalidStateCount":0},"mixedEffectsModels":[{"emtype":"FIXED","intercept":null,"modelEffects":[]}]},"edfMethods2":[{"value":"auto","displayValue":"Automatic (default)","keys":["edfAuto","auto","Automatic (default)"],"label":"Automatic (default)","baseid":"{\"value\":\"auto\",\"label\":\"Automatic (default)\"}","id":"{\"value\":\"auto\",\"label\":\"Automatic (default)\"}1"}],"edfMethods3":[{"value":"auto","displayValue":"Automatic (default)","keys":["edfAuto","auto","Automatic (default)"],"label":"Automatic (default)","baseid":"{\"value\":\"auto\",\"label\":\"Automatic (default)\"}","id":"{\"value\":\"auto\",\"label\":\"Automatic (default)\"}1"}],"minRiskSize":[{"value":"minRiskSizeRelative","displayValue":"Specify relative lower bound","keys":["minRiskSizeRelative",null,"Specify relative lower bound"],"label":"Specify relative lower bound","baseid":"{\"value\":\"minRiskSizeRelative\",\"label\":\"Specify relative lower bound\"}","id":"{\"value\":\"minRiskSizeRelative\",\"label\":\"Specify relative lower bound\"}1"}],"relativeAlpha":0.5,"relativeC":1,"absoluteSize":0,"ensureMLEChkbox":"0","zeroProb":1e-8,"maxiterCombo":[{"value":"maxiterDefaultChoice","displayValue":"Use 500 (default)","keys":["maxiterDefaultChoice",null,"Use 500 (default)"],"label":"Use 500 (default)","baseid":"{\"value\":\"maxiterDefaultChoice\",\"label\":\"Use 500 (default)\"}","id":"{\"value\":\"maxiterDefaultChoice\",\"label\":\"Use 500 (default)\"}1"}],"maxiter":500,"epsCombo":[{"value":"epsDefaultChoice","displayValue":"Use 1e-8 (default)","keys":["epsDefaultChoice",null,"Use 1e-8 (default)"],"label":"Use 1e-8 (default)","baseid":"{\"value\":\"epsDefaultChoice\",\"label\":\"Use 1e-8 (default)\"}","id":"{\"value\":\"epsDefaultChoice\",\"label\":\"Use 1e-8 (default)\"}1"}],"epsValue":1e-8,"varDivisor":[{"value":"df","displayValue":"Degrees of freedom (default)","keys":["dof","df","Degrees of freedom (default)"],"label":"Degrees of freedom (default)","baseid":"{\"value\":\"df\",\"label\":\"Degrees of freedom (default)\"}","id":"{\"value\":\"df\",\"label\":\"Degrees of freedom (default)\"}1"}],"nlMethod":[{"value":"trureg","displayValue":"Trust region (default)","keys":["trustRegion","trureg","Trust region (default)"],"label":"Trust region (default)","baseid":"{\"value\":\"trureg\",\"label\":\"Trust region (default)\"}","id":"{\"value\":\"trureg\",\"label\":\"Trust region (default)\"}1"}],"nlMaxiterCombo":[{"value":"nlMaxiterDefaultChoice","displayValue":"Use default value","keys":["nlMaxiterDefaultChoice",null,"Use default value"],"label":"Use default value","baseid":"{\"value\":\"nlMaxiterDefaultChoice\",\"label\":\"Use default value\"}","id":"{\"value\":\"nlMaxiterDefaultChoice\",\"label\":\"Use default value\"}1"}],"nlMaxiter":50,"statsChoice":[{"value":"defaultStatsChoice","displayValue":"Default statistics","keys":["defaultStatsChoice",null,"Default statistics"],"label":"Default statistics","baseid":"{\"value\":\"defaultStatsChoice\",\"label\":\"Default statistics\"}","id":"{\"value\":\"defaultStatsChoice\",\"label\":\"Default statistics\"}1"}],"modelSelection":"1","convergenceStatus":"1","statisticsOfFit":"1","parameterEstimates":"1","optimizationSummary":"1","distributionInfo":"0","allFitStatistics":"0","descStats":"0","estimationDetails":"0","initialValues":"0","optimizationHistory":"0","distributionParam":"1","selectPlotsCombo":[{"value":"defaultPlots","displayValue":"Default plots","keys":["defaultPlots",null,"Default plots"],"label":"Default plots","baseid":"{\"value\":\"defaultPlots\",\"label\":\"Default plots\"}","id":"{\"value\":\"defaultPlots\",\"label\":\"Default plots\"}1"}],"cdfPlot":"1","cdfPlotPerDist":"0","ppPlot":"0","qqPlot":"0","pdfPlot":"1","pdfPlotPerDist":"0","pdfHistogram":"0","pdfKernel":"0","selectionMethod":[{"value":"none","displayValue":"None","keys":["noneSelectionChoice","none","None"],"label":"None","baseid":"{\"value\":\"none\",\"label\":\"None\"}","id":"{\"value\":\"none\",\"label\":\"None\"}1"}],"selectMethod":[{"value":"sbc","displayValue":"Schwarz Bayesian information criterion (default)","keys":["sbcChoice","sbc","Schwarz Bayesian information criterion (default)"],"label":"Schwarz Bayesian information criterion (default)","baseid":"{\"value\":\"sbc\",\"label\":\"Schwarz Bayesian information criterion (default)\"}","id":"{\"value\":\"sbc\",\"label\":\"Schwarz Bayesian information criterion (default)\"}1"}],"stopMethod":[{"value":"sbc","displayValue":"Schwarz Bayesian information criterion (default)","keys":["sbcChoice","sbc","Schwarz Bayesian information criterion (default)"],"label":"Schwarz Bayesian information criterion (default)","baseid":"{\"value\":\"sbc\",\"label\":\"Schwarz Bayesian information criterion (default)\"}","id":"{\"value\":\"sbc\",\"label\":\"Schwarz Bayesian information criterion (default)\"}1"}],"chooseMethod":[{"value":"sbc","displayValue":"Schwarz Bayesian information criterion (default)","keys":["sbcChoice","sbc","Schwarz Bayesian information criterion (default)"],"label":"Schwarz Bayesian information criterion (default)","baseid":"{\"value\":\"sbc\",\"label\":\"Schwarz Bayesian information criterion (default)\"}","id":"{\"value\":\"sbc\",\"label\":\"Schwarz Bayesian information criterion (default)\"}1"}],"useIncludeList":"0","includeList":[],"detailsCombo":[{"value":"summary","displayValue":"Selection summary (default)","keys":["summaryDetailsChoice","summary","Selection summary (default)"],"label":"Selection summary (default)","baseid":"{\"value\":\"summary\",\"label\":\"Selection summary (default)\"}","id":"{\"value\":\"summary\",\"label\":\"Selection summary (default)\"}1"}],"splitClassCombo":[{"value":"entireEffectChoice","displayValue":"An entire effect","keys":["entireEffectChoice",null,"An entire effect"],"label":"An entire effect","baseid":"{\"value\":\"entireEffectChoice\",\"label\":\"An entire effect\"}","id":"{\"value\":\"entireEffectChoice\",\"label\":\"An entire effect\"}1"}],"hierarchy":"0","procSevselect":"1","proc":"procSevselect","procCas":"0","outputEST":"0","outputESTName":{"value":"","cbSelected":false},"outputESTCovout":"0","outputStore":"0","outputStoreName":{"value":"","cbSelected":false},"outputOut":"0","outputOutName":{"value":"","cbSelected":false},"scoringFuncSelect":[],"includeAllVars":"0","includeVars":"includeNoVars","includeSelectedVars":"0","includeNoVars":"1","quantilesTable":{"rows":{"values":[{"id":1,"quantilesTable_CDF":"","quantilesTable_Name":""}]},"columns":{"quantilesTable_CDF":{"values":[""],"isValid":"1","numValues":0},"quantilesTable_Name":{"values":[""],"isValid":"1","numValues":0}}}}
]]>
</TemplateValues>

</Task>