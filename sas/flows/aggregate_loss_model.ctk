<Task revision="1" schemaVersion="7.3">
	<Registration>
		<Name>aggregate_loss_model.ctk</Name>
		<Description>The Aggregate Loss Models task computes an estimate of the probability distribution model of the aggregate loss, based on the knowledge of the distribution of loss count and loss severity.</Description>
		<GUID>7458599a-6025-4ff6-aee9-dab1b4324acd</GUID>
		<Procedures>CCDM CNTSELECT SEVSELECT CAS</Procedures>
		<Links>
            <Link href="https://documentation.sas.com/?softwareId=STUDIOBASIC&amp;softwareVersion=01&amp;softwareContextId=tasks&amp;requestor=inapp">SAS Studio Task Reference Guide</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=ANVIYA&amp;softwareVersion=01&amp;softwareContextId=proc_ccdm&amp;requestor=inapp">The CCDM Procedure</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=ANVIYA&amp;softwareVersion=01&amp;softwareContextId=proc_cntselect&amp;requestor=inapp">The CNTSELECT Procedure</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=ANVIYA&amp;softwareVersion=01&amp;softwareContextId=proc_sevselect&amp;requestor=inapp">The SEVSELECT Procedure</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=PGMVIYA&amp;softwareVersion=01&amp;softwareContextId=proc_cas&amp;requestor=inapp">The CAS Procedure</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="https://documentation.sas.com/?softwareId=PGMVIYA&amp;softwareVersion=01&amp;softwareContextId=actions&amp;requestor=inapp">The Viya Actions (severity, cdm, countregFitModel)</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="http://support.sas.com/training/tutorial/viya/index.html">SAS Tutorials</Link>            
		</Links>
	</Registration>

	<Metadata>
		<DataSources>
			<DataSource libraryEngineInclude="CAS" name="severity" where="true">
				<Roles>
					<Role exclude="sevContinuousVar,sevClassVar,offsetVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="1" minVars="1" name="lossSeverity" type="N">Loss variable:</Role>
					<Role exclude="lossSeverity,sevClassVar,offsetVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="0" minVars="0" name="sevContinuousVar" type="N">Continuous variables:</Role>
					<Role exclude="lossSeverity,sevContinuousVar,offsetVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="0" minVars="0" name="sevClassVar" type="A">Categorical variables:</Role>
                    <Role exclude="lossSeverity,sevContinuousVar,sevClassVar,leftCensorVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" maxVars="1" minVars="0" name="offsetVariable" type="N">Offset variable:</Role>
                    <!-- Variables that define censoring limit and/or truncation threshold. -->
                    <Role exclude="lossSeverity,sevContinuousVar,sevClassVar,offsetVariable,rightCensorVariable,leftTruncateVariable,rightTruncateVariable" indent="2" maxVars="1" minVars="1" name="leftCensorVariable" type="N">Left-censoring variable:</Role>
                    <Role exclude="lossSeverity,sevContinuousVar,sevClassVar,offsetVariable,leftCensorVariable,leftTruncateVariable,rightTruncateVariable" indent="2" maxVars="1" minVars="1" name="rightCensorVariable" type="N">Right-censoring variable:</Role>
                    <Role exclude="lossSeverity,sevContinuousVar,sevClassVar,offsetVariable,leftCensorVariable,rightCensorVariable,rightTruncateVariable" indent="2" maxVars="1" minVars="1" name="leftTruncateVariable" type="N">Left-truncation variable:</Role>
                    <Role exclude="lossSeverity,sevContinuousVar,sevClassVar,offsetVariable,leftCensorVariable,rightCensorVariable,leftTruncateVariable" indent="2" maxVars="1" minVars="1" name="rightTruncateVariable" type="N">Right-truncation variable:</Role>
				</Roles>
			</DataSource>
			<DataSource libraryEngineInclude="CAS" name="count" where="true">
				<Roles>
					<Role exclude="countClassVar,countContinuousVar" maxVars="1" minVars="1" name="lossCount" type="N">Dependent count variable:</Role>
					<Role exclude="lossCount,countClassVar" maxVars="0" minVars="0" name="countContinuousVar" type="N">Continuous variables:</Role>
					<Role exclude="lossCount,countContinuousVar" maxVars="0" minVars="0" name="countClassVar" type="A">Categorical variables:</Role>
				</Roles>
			</DataSource>
			<DataSource defaultValue="" libraryEngineInclude="CAS" name="input" where="true">
				<Roles>
					<Role exclude="repId" maxVars="1" minVars="1" name="lossCountInput" type="N">Count:</Role>
					<Role exclude="lossCountInput" maxVars="1" minVars="0" name="repId" type="N">Replicate identifier:</Role>
				</Roles>
			</DataSource>
			<DataSource libraryEngineInclude="CAS" name="sevModelData">
			</DataSource>
			<DataSource libraryEngineInclude="CAS" name="cntModelData">
			</DataSource>
		</DataSources>

		<Options>
            <Option inputType="string" name="dataTab">Data</Option>
            <!-- Losss severity group -->
            <Option inputType="string" name="lossSevGroup">Severity</Option>
			<Option inputType="string" name="sevRadioLabel">Specify the loss severity model</Option>
            <Option inputType="radio" name="newSev" variable="radioLossSevType">Construct a new severity model</Option>
            <Option defaultValue="1" inputType="radio" name="existingSev" variable="radioLossSevType">Use an existing severity model</Option>
			<Option indent="1" inputType="string" name="newSevNote">To construct a new model, go to SEVERITY tab.</Option>
 			<Option inputType="string" name="sevModelDataGroup">Data</Option>
			<Option inputType="string" name="sevExistingModelNote">Note: To create a severity model, run the Severity Models task in SAS Viya Econometrics category and save the model in item store format.</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="sevContainRegressor">Model includes scale regressors</Option>
            <!-- Loss count group -->
            <Option inputType="string" name="lossCountGroup">Count</Option>
			<Option inputType="string" name="countRadioLabel">Specify the loss count model</Option>
            <Option inputType="radio" name="externalCount" variable="radioLossCountType">Use externally simulated counts</Option>
            <Option defaultValue="1" inputType="radio" name="internalCount" variable="radioLossCountType">Simulate counts internally</Option>
            <Option indent="1" inputType="radio" name="newCount" variable="radioLossCntInternalType">Construct a new count model</Option>
            <Option defaultValue="1" indent="1" inputType="radio" name="existingCount" variable="radioLossCntInternalType">Use an existing count model</Option>
			<Option indent="1" inputType="string" name="externalCountNote">Specify a data table that contains externally simulated counts in the INPUT DATA section below.</Option>
			<Option indent="2" inputType="string" name="newCountNote">To construct a new model, go to COUNT tab.</Option>
 			<Option indent="1" inputType="string" name="cntModelDataGroup">Data</Option>
			<Option inputType="string" name="cntExistingModelNote">Note: To create a count model, use the CNTSELECT procedure in SAS Econometrics.</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="cntContainRegressor">Model includes regressors</Option>
            <!-- Input group -->
            <Option inputType="string" name="inputGroup">Input Data</Option>
 			<Option inputType="string" name="inputDataGroup">Data</Option>
 			<Option inputType="string" name="inputRolesGroup">Roles</Option>
            <Option inputType="string" name="inputDataNoteGroup">Note</Option>
			<Option inputType="string" name="inputDataNote">Note: Input data is required when you use externally simulated counts or the severity model includes any scale regressors or the count model includes any regressors.</Option>

			<!-- Severity Model Tab -->
            <Option inputType="string" name="sevModelTab">Severity</Option>
            <Option inputType="string" name="noSevModelInfoNoteGroup">Note</Option>
			<Option inputType="string" name="noSevModelInfoNote">Severity model settings are available when constructing a new severity model.</Option>
			<!-- Loss Severity Model -->
 			<Option inputType="string" name="sevDataGroup">Data</Option>
 			<Option inputType="string" name="sevRolesGroup">Roles</Option>
            <!-- Loss severity: censoring/truncation related -->
            <Option defaultValue="0" indent="1" inputType="checkbox" name="leftCensor">Set the left-censoring limit</Option>
            <Option defaultValue="1" indent="2" inputType="radio" name="leftCensorVarChoice" variable="leftCensorGrp">Specify variable</Option>
            <Option indent="2" inputType="radio" name="leftCensorValueChoice" variable="leftCensorGrp">Specify value</Option>
            <Option indent="2" inputType="numbertext" invalidMessage="Enter a number." missingMessage="Enter a number." name="leftCensorValue" rangeMessage="Enter a number." required="true">Left-censoring limit value:</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="rightCensor">Set the right-censoring limit</Option>
            <Option defaultValue="1" indent="2" inputType="radio" name="rightCensorVarChoice" variable="rightCensorGrp">Specify variable</Option>
            <Option indent="2" inputType="radio" name="rightCensorValueChoice" variable="rightCensorGrp">Specify value</Option>
            <Option indent="2" inputType="numbertext" invalidMessage="Enter a number." missingMessage="Enter a number." name="rightCensorValue" rangeMessage="Enter a number." required="true">Right-censoring limit value:</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="leftTruncate">Set the left-truncation threshold</Option>
            <Option defaultValue="1" indent="2" inputType="radio" name="leftTruncateVarChoice" variable="leftTruncateGrp">Specify variable</Option>
            <Option indent="2" inputType="radio" name="leftTruncateValueChoice" variable="leftTruncateGrp">Specify value</Option>
            <Option indent="2" inputType="numbertext" invalidMessage="Enter a number." missingMessage="Enter a number." name="leftTruncateValue" rangeMessage="Enter a number." required="true">Left-truncation threshold value:</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="rightTruncate">Set the right-truncation threshold</Option>
            <Option defaultValue="1" indent="2" inputType="radio" name="rightTruncateVarChoice" variable="rightTruncateGrp">Specify variable</Option>
            <Option indent="2" inputType="radio" name="rightTruncateValueChoice" variable="rightTruncateGrp">Specify value</Option>
            <Option indent="2" inputType="numbertext" invalidMessage="Enter a number." missingMessage="Enter a number." name="rightTruncateValue" rangeMessage="Enter a number." required="true">Right-truncation threshold value:</Option>
            <!-- Severity distribution -->
            <Option inputType="string" name="sevDistGroup">Distribution</Option>
            <Option inputType="string" name="distributionsNote">Specify candidate distributions of the loss severity:</Option>
            <Option defaultValue="logn" inputType="dualselector" name="distributionList" required="true"/>
            <Option inputType="string" name="burrDistribution" returnValue="burr">Burr</Option>
            <Option inputType="string" name="expDistribution" returnValue="exp">Exponential</Option>
            <Option inputType="string" name="gammaDistribution" returnValue="gamma">Gamma</Option>
            <Option inputType="string" name="genParetoDistribution" returnValue="gpd">Generalized Pareto</Option>
            <Option inputType="string" name="invGuassDistribution" returnValue="igauss">Inverse Gaussian</Option>
            <Option inputType="string" name="lognDistribution" returnValue="logn">Lognormal</Option>
            <Option inputType="string" name="paretoDistribution" returnValue="pareto">Pareto</Option>
            <Option inputType="string" name="weibullDistribution" returnValue="weibull">Weibull</Option>
            <Option inputType="string" name="tweedieDistribution" returnValue="tweedie">Tweedie</Option>
            <Option inputType="string" name="scaledTweedieDistribution" returnValue="stweedie">Scaled Tweedie</Option>
            <Option indent="1" inputType="string" name="tweedieDistNote">The Tweedie distribution is not valid for regression modeling. Use the scaled Tweedie distribution instead.</Option>
            <!-- Severity model builder -->
            <Option inputType="string" name="sevModelEffectsGroup">Scale Model Effects</Option>
            <Option defaultValue="1" inputType="radio" name="sevMainModel" variable="radioSevModelType">Main effects model</Option>
            <Option inputType="radio" name="sevAdvancedModel" variable="radioSevModelType">Custom model</Option>
            <Option excludeTools="POLYEFFECT,TWOFACT,THREEFACT,NFACTPOLY" fixedInterceptVisible="false" inputType="mixedeffects" name="sevModelBuilder" roleClassification="sevClassVar" roleContinuous="sevContinuousVar" width="100%"/>
				
			<!-- Count Model Tab -->
            <Option inputType="string" name="cntModelTab">Count</Option>
            <Option inputType="string" name="noCntModelInfoNoteGroup">Note</Option>
			<Option inputType="string" name="noCntModelInfoNote">Count model settings are available when constructing a new count model internally.</Option>
			<!-- Loss Count Model -->
 			<Option inputType="string" name="cntDataGroup">Data</Option>
 			<Option inputType="string" name="cntRolesGroup">Roles</Option>
            <Option inputType="string" name="cntDistGroup">Distribution</Option>
			<Option defaultValue="poisson" indent="1" inputType="combobox" name="cntDistribution">Distribution:</Option>
			<Option inputType="string" name="poisson">Poisson</Option>
			<Option inputType="string" name="negbin1">Negative binomial with a linear variance</Option>
			<Option inputType="string" name="negbin2">Negative binomial with a quadratic variance</Option>
            <Option inputType="string" name="zeroPoisson">Zero-inflated Poisson</Option>
            <Option inputType="string" name="zeroNegbin">Zero-inflated negative binomial</Option>
            <!-- Count model builder -->
            <Option inputType="string" name="cntModelEffectsGroup">Model Effects</Option>
            <Option defaultValue="1" inputType="radio" name="cntMainModel" variable="radioCntModelType">Main effects model</Option>
            <Option inputType="radio" name="cntAdvancedModel" variable="radioCntModelType">Custom model</Option>
            <Option excludeTools="POLYEFFECT,TWOFACT,THREEFACT,NFACTPOLY" inputType="mixedeffects" name="cntModelBuilder" roleClassification="countClassVar" roleContinuous="countContinuousVar" width="100%"/>
            <Option effects="meanszero" excludeTools="POLYEFFECT,TWOFACT,THREEFACT,NFACTPOLY" inputType="mixedeffects" name="cntZeroInflatedModelBuilder" roleClassification="countClassVar" roleContinuous="countContinuousVar" width="100%"/>
            <!-- Zero-inflated Poisson/negative binomial regression model options -->
			<Option inputType="string" name="linkFunc">Link function used to compute probability of zeros:</Option>
			<Option defaultValue="1" indent="1" inputType="radio" name="logistic" variable="linkFuncGrp">Logistic (default)</Option>
			<Option indent="1" inputType="radio" name="normal" variable="linkFuncGrp">Normal</Option>

            <Option inputType="string" name="optionsTab">Options</Option>
            <Option inputType="string" name="methodsGroup">Methods</Option>
            <Option decimalPlaces="0" defaultValue="1000" hintMessage="1000" indent="1" inputType="numbertext" invalidMessage="Enter an integer that is greater than 0 and less than or equal to 1000." minValue="1" name="maxCount" promptMessage="Enter an integer that is greater than 0 and less than or equal to 1000." rangeMessage="Enter an integer that is greater than 0 and less than or equal to 1000." width="100px">Maximum number of loss count for simulating one aggregate loss sample point:</Option>
            <Option decimalPlaces="0" defaultValue="100000" hintMessage="100000" inputType="numbertext" invalidMessage="Enter an integer that is greater than 0." minValue="1" name="nReplicate" promptMessage="Enter an integer that is greater than 0." rangeMessage="Enter an integer that is greater than 0.">Sample size:</Option>
            <Option decimalPlaces="0" defaultValue="1" hintMessage="1" inputType="numbertext" invalidMessage="Enter an integer that is greater than 0." minValue="1" name="nReplicateExternal" promptMessage="Enter an integer that is greater than 0." rangeMessage="Enter an integer that is greater than 0.">Sample size multiplier:</Option>
            <Option inputType="string" name="perturbationGroup">Perturbation Analysis</Option>
            <Option defaultValue="0" inputType="checkbox" name="perturbation">Perform perturbation analysis</Option>
            <Option decimalPlaces="0" defaultValue="30" hintMessage="30" indent="1" inputType="numbertext" invalidMessage="Enter an integer that is greater than 0." minValue="1" missingMessage="Enter an integer that is greater than 0." name="nPerturbedSamples" rangeMessage="Enter an integer that is greater than 0." required="true">Number of perturbed samples:</Option>
				
            <!-- Statistics -->
            <Option inputType="string" name="statsGroup">Statistics</Option>
            <Option defaultValue="defaultStatsChoice" inputType="combobox" name="statsChoice">Statistics to display:</Option>
            <Option inputType="string" name="defaultStatsChoice">Default statistics</Option>
            <Option inputType="string" name="customStatsChoice">Default and selected statistics</Option>
            <Option inputType="string" name="noneChoice">None</Option>
            <Option defaultValue="1" indent="1" inputType="checkbox" name="summaryStats">Summary statistics of the aggregate loss sample</Option>
            <Option defaultValue="1" indent="1" inputType="checkbox" name="percentiles">Percentiles of the aggregate loss sample</Option>
            <Option defaultValue="0" indent="1" inputType="checkbox" name="perturbSummary">Summary statistics and percentiles of the samples from perturbation analysis</Option>
            <!-- Plots -->
            <Option inputType="string" name="plotsGroup">Plots</Option>
            <Option defaultValue="0" inputType="checkbox" name="pdfPlot">Probability density function</Option>
            <Option defaultValue="0" inputType="checkbox" name="edfPlot">Empirical distribution function</Option>
			<!-- Code generation options -->
			<Option inputType="string" name="codeGenerationGroup">Code Generation</Option>
			<Option defaultValue="0" inputType="radio" name="procEconometrics" variable="proc">Use Econometrics procedures</Option>
			<Option inputType="radio" name="procCas" variable="proc">Use CAS procedure</Option>

			<!-- Output Tab -->
            <Option inputType="string" name="outputTab">Output</Option>
            <Option inputType="string" name="outputGroup">Output Data</Option>
            <Option inputType="string" name="casOutputLibrefNote">The following tables must use a CAS engine libref.</Option>
            <Option defaultValue="0" inputType="checkbox" name="outputSum">Create the summary statistics of the aggregate loss samples data</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputSumName" required="true" unique="true">Specify a CAS table:</Option>
			<Option defaultValue="0" indent="1" inputType="checkbox" name="mean">Mean</Option>
			<Option defaultValue="0" indent="1" inputType="checkbox" name="stdDev">Standard deviation</Option>
			<Option defaultValue="0" indent="1" inputType="checkbox" name="skewness">Skewness</Option>
			<Option defaultValue="0" indent="1" inputType="checkbox" name="kurtosis">Kurtosis</Option>
            <Option defaultValue="1" indent="1" inputType="checkbox" name="percentilesSumStat">Percentiles</Option>
			<Option defaultValue="oneP,fiveP,twentyFiveP,fiftyP,seventyFiveP,ninetyFiveP,ninetyNineP" height="120px" indent="2" inputType="select" multiple="true" name="percentilesSelect">Select percentiles:</Option>
				<Option inputType="string" name="pointFiveP">0.5th</Option>
				<Option inputType="string" name="oneP">1st</Option>
				<Option inputType="string" name="fiveP">5th</Option>
				<Option inputType="string" name="tenP">10th</Option>
				<Option inputType="string" name="twentyFiveP">25th</Option>
				<Option inputType="string" name="fiftyP">50th</Option>
				<Option inputType="string" name="seventyFiveP">75th</Option>
				<Option inputType="string" name="ninetyP">90th</Option>
				<Option inputType="string" name="ninetyFiveP">95th</Option>
				<Option inputType="string" name="ninetyNineP">99th</Option>
				<Option inputType="string" name="nineNineFiveP">99.5th</Option>
            <Option defaultValue="0" inputType="checkbox" name="outputSample">Create the aggregate loss samples data</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputSampleName" required="true" unique="true">Specify a CAS table:</Option>
            <Option defaultValue="0" inputType="checkbox" name="outputDraw">Create the individual severity random draws data</Option>
            <Option indent="1" inputType="outputdata" libraryEngineInclude="cas" name="outputDrawName" required="true" unique="true">Specify a CAS table:</Option>
			
            <!--- code comments and title string -->
            <Option inputType="string" name="fitSevModelMsg">Fit the loss severity model</Option>
            <Option inputType="string" name="fitCntModelMsg">Fit the loss count model</Option>
            <Option inputType="string" name="aggLossEstMsg">Estimate the distribution of the aggregate loss</Option>
            <Option inputType="string" name="drawidExistMsg">Check if _drawid_ variable exists</Option>
            <Option inputType="string" name="getSevDistMsg">Get the list of severity distributions</Option>
            <Option inputType="string" name="getUnperturbedMsg">Bring back to client the unperturbed sample for the specified severity distribution</Option>
            <Option inputType="string" name="pdfPlotMsg">Create PDF plot</Option>
            <Option inputType="string" name="edfPlotMsg">Create EDF plot</Option>
            <Option inputType="string" name="prepareEDFMsg">Prepare data that contains EDF and its confidence limits for unique values of aggregate loss</Option>
            <Option inputType="string" name="pdfTitle">Probability Density Function</Option>
			<Option inputType="string" name="edfTitle">Empirical Distribution Function</Option>
            <Option inputType="string" name="pdfLabel">Probability Density</Option>
            <Option inputType="string" name="edfVarLabel">Cumulative Probability</Option>
            <Option inputType="string" name="pdfPlotTitle2Temp">{1} Severity Model and {2} Count Model</Option>
            <Option inputType="string" name="aggLossLabelTemp">Aggregate Loss ({1})</Option>
            <Option inputType="string" name="edfPlotTitle2Temp">{1} Severity Model and {2} Count Model</Option>
			<Option inputType="string" name="commentMacro">Macro to check the existence of the 'svrtdist' CAS table and load it if not available</Option>
			<Option inputType="string" name="commentSvrtdistLoaded">Check if 'svrtdist' is already loaded</Option>
			<Option inputType="string" name="commentSampleCaslib">Try to load 'svrtdist' from the 'samples' caslib</Option>
			<Option inputType="string" name="commentPublicCaslib">Try to load 'svrtdist' from the 'public' caslib</Option>
			<Option inputType="string" name="commentRunSevselect">If 'svrtdist' could not be loaded from a caslib, create it by using PROC SEVSELECT</Option>
		</Options>
	</Metadata>

	<UI>
		<Container option="dataTab">
			<Group open="true" option="lossSevGroup">
				<OptionItem option="sevRadioLabel"/>
				<OptionItem option="newSev"/>
				<OptionItem option="existingSev"/>
				<OptionItem option="newSevNote"/>
				<Group open="true" option="sevModelDataGroup">
					<OptionItem option="sevExistingModelNote"/>
					<DataItem data="sevModelData"/>
					<OptionItem option="sevContainRegressor"/>
				</Group>
			</Group>
			<Group open="true" option="lossCountGroup">
				<OptionItem option="countRadioLabel"/>
				<OptionItem option="externalCount"/>
				<OptionItem option="internalCount"/>
				<OptionItem option="newCount"/>
				<OptionItem option="existingCount"/>
				<OptionItem option="externalCountNote"/>
				<OptionItem option="newCountNote"/>
				<Group open="true" option="cntModelDataGroup">
					<OptionItem option="cntExistingModelNote"/>
					<DataItem data="cntModelData"/>
					<OptionItem option="cntContainRegressor"/>
				</Group>
			</Group>
			<Group open="true" option="inputGroup">
                <Group open="true" option="inputDataGroup">
					<OptionItem option="inputDataNote"/>
                    <DataItem data="input"/>
                </Group>
                <Group open="true" option="inputRolesGroup">
                    <RoleItem role="lossCountInput"/>
                    <RoleItem role="repId"/>
                </Group>
			</Group>
		</Container>

        <Container option="sevModelTab">
            <Group open="true" option="noSevModelInfoNoteGroup">
                <OptionItem option="noSevModelInfoNote"/>
            </Group>        
			<Group open="true" option="sevDataGroup">
				<DataItem data="severity"/>
			</Group>
			<Group open="true" option="sevRolesGroup">
				<RoleItem role="lossSeverity"/>
				<OptionItem option="leftCensor"/>
				<OptionItem option="leftCensorVarChoice"/>
				<RoleItem role="leftCensorVariable"/>
				<OptionItem option="leftCensorValueChoice"/>
				<OptionItem option="leftCensorValue"/>
				<OptionItem option="rightCensor"/>
				<OptionItem option="rightCensorVarChoice"/>
				<RoleItem role="rightCensorVariable"/>
				<OptionItem option="rightCensorValueChoice"/>
				<OptionItem option="rightCensorValue"/>
				<OptionItem option="leftTruncate"/>
				<OptionItem option="leftTruncateVarChoice"/>
				<RoleItem role="leftTruncateVariable"/>
				<OptionItem option="leftTruncateValueChoice"/>
				<OptionItem option="leftTruncateValue"/>
				<OptionItem option="rightTruncate"/>
				<OptionItem option="rightTruncateVarChoice"/>
				<RoleItem role="rightTruncateVariable"/>
				<OptionItem option="rightTruncateValueChoice"/>
				<OptionItem option="rightTruncateValue"/>
				<RoleItem role="sevContinuousVar"/>
				<RoleItem role="sevClassVar"/>
			</Group>
            <Group open="true" option="sevDistGroup">
                <OptionItem option="distributionsNote"/>
                <OptionChoice option="distributionList">
                    <OptionItem option="burrDistribution"/>
                    <OptionItem option="expDistribution"/>
                    <OptionItem option="gammaDistribution"/>
                    <OptionItem option="genParetoDistribution"/>
                    <OptionItem option="invGuassDistribution"/>
                    <OptionItem option="lognDistribution"/>
                    <OptionItem option="paretoDistribution"/>  
                    <OptionItem option="weibullDistribution"/> 
                    <OptionItem option="tweedieDistribution"/>
                    <OptionItem option="scaledTweedieDistribution"/>
                </OptionChoice>
				<OptionItem option="tweedieDistNote"/>
            </Group>
			<Group open="true" option="sevModelEffectsGroup">
				<OptionItem option="sevMainModel"/>
				<OptionItem option="sevAdvancedModel"/>
				<OptionItem option="sevModelBuilder"/>
				<RoleItem role="offsetVariable"/>
			</Group>
        </Container>

        <Container option="cntModelTab">
            <Group open="true" option="noCntModelInfoNoteGroup">
                <OptionItem option="noCntModelInfoNote"/>
            </Group>        
			<Group open="true" option="cntDataGroup">
				<DataItem data="count"/>
			</Group>
			<Group open="true" option="cntRolesGroup">
				<RoleItem role="lossCount"/>
				<RoleItem role="countContinuousVar"/>
				<RoleItem role="countClassVar"/>
			</Group>
            <Group open="true" option="cntDistGroup">
                <OptionChoice option="cntDistribution">
                    <OptionItem option="poisson"/>
                    <OptionItem option="negbin1"/>
                    <OptionItem option="negbin2"/>
                    <OptionItem option="zeroPoisson"/>
                    <OptionItem option="zeroNegbin"/>
                </OptionChoice>
            </Group>
			<Group open="true" option="cntModelEffectsGroup">
				<OptionItem option="cntMainModel"/>
				<OptionItem option="cntAdvancedModel"/>
				<OptionItem option="cntModelBuilder"/>
				<OptionItem option="cntZeroInflatedModelBuilder"/>
				<OptionItem option="linkFunc"/>
				<OptionItem option="logistic"/>
				<OptionItem option="normal"/>
			</Group>
        </Container>

        <Container option="optionsTab">
            <Group open="true" option="methodsGroup">			
                <OptionItem option="nReplicate"/>
                <OptionItem option="nReplicateExternal"/>
                <OptionItem option="maxCount"/>
				<Group option="perturbationGroup">
					<OptionItem option="perturbation"/>
					<OptionItem option="nPerturbedSamples"/>
				</Group>
            </Group>
            <Group open="true" option="statsGroup">
                <OptionChoice option="statsChoice">
                    <OptionItem option="defaultStatsChoice"/>
                    <OptionItem option="customStatsChoice"/>
                    <OptionItem option="noneChoice"/>
                </OptionChoice>
                <OptionItem option="summaryStats"/>
                <OptionItem option="percentiles"/>
                <OptionItem option="perturbSummary"/>
            </Group>
            <Group open="true" option="plotsGroup">
                <OptionItem option="pdfPlot"/>
                <OptionItem option="edfPlot"/>
            </Group>
			<Group open="true" option="codeGenerationGroup">
				<OptionItem option="procEconometrics"/>
				<OptionItem option="procCas"/>
			</Group>
        </Container>

        <Container option="outputTab">
            <Group open="true" option="outputGroup">
                <OptionItem option="casOutputLibrefNote"/>
                <OptionItem option="outputSum"/>
                <OptionItem option="outputSumName"/>
                <OptionItem option="mean"/>
                <OptionItem option="stdDev"/>
                <OptionItem option="percentilesSumStat"/>
				<OptionChoice option="percentilesSelect">
					<OptionItem option="pointFiveP"/>
					<OptionItem option="oneP"/>
					<OptionItem option="fiveP"/>
					<OptionItem option="tenP"/>
					<OptionItem option="twentyFiveP"/>
					<OptionItem option="fiftyP"/>
					<OptionItem option="seventyFiveP"/>
					<OptionItem option="ninetyP"/>
					<OptionItem option="ninetyFiveP"/>
					<OptionItem option="ninetyNineP"/>
					<OptionItem option="nineNineFiveP"/>
				</OptionChoice>
                <OptionItem option="skewness"/>
                <OptionItem option="kurtosis"/>
                <OptionItem option="outputSample"/>
                <OptionItem option="outputSampleName"/>
                <OptionItem option="outputDraw"/>
                <OptionItem option="outputDrawName"/>
            </Group>
        </Container>
	</UI>
	
	<Dependencies>
        <Dependency condition="($radioLossSevType=='newSev')">
            <Target action="show" conditionResult="true" option="newSevNote"/>
            <Target action="hide" conditionResult="false" option="newSevNote"/>
            <Target action="hide" conditionResult="true" option="noSevModelInfoNoteGroup"/>
            <Target action="show" conditionResult="false" option="noSevModelInfoNoteGroup"/>
            <Target action="show" conditionResult="true" option="sevDataGroup"/>
            <Target action="hide" conditionResult="false" option="sevDataGroup"/>
            <Target action="show" conditionResult="true" option="sevRolesGroup"/>
            <Target action="hide" conditionResult="false" option="sevRolesGroup"/>
            <Target action="show" conditionResult="true" option="sevDistGroup"/>
            <Target action="hide" conditionResult="false" option="sevDistGroup"/>
            <Target action="show" conditionResult="true" option="sevModelEffectsGroup"/>
            <Target action="hide" conditionResult="false" option="sevModelEffectsGroup"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='existingSev')">
            <Target action="show" conditionResult="true" option="sevModelDataGroup"/>
            <Target action="hide" conditionResult="false" option="sevModelDataGroup"/>
            <Target action="show" conditionResult="true" option="sevContainRegressor"/>
            <Target action="hide" conditionResult="false" option="sevContainRegressor"/>
        </Dependency>
        <Dependency condition="($radioLossCountType=='internalCount')">
            <Target action="show" conditionResult="true" option="radioLossCntInternalType"/>
            <Target action="hide" conditionResult="false" option="radioLossCntInternalType"/>
        </Dependency>
        <Dependency condition="($radioLossCountType=='internalCount' &amp;&amp; $radioLossCntInternalType=='newCount')">
            <Target action="show" conditionResult="true" option="newCountNote"/>
            <Target action="hide" conditionResult="false" option="newCountNote"/>
            <Target action="hide" conditionResult="true" option="noCntModelInfoNoteGroup"/>
            <Target action="show" conditionResult="false" option="noCntModelInfoNoteGroup"/>
            <Target action="show" conditionResult="true" option="cntDataGroup"/>
            <Target action="hide" conditionResult="false" option="cntDataGroup"/>
            <Target action="show" conditionResult="true" option="cntRolesGroup"/>
            <Target action="hide" conditionResult="false" option="cntRolesGroup"/>
            <Target action="show" conditionResult="true" option="cntDistGroup"/>
            <Target action="hide" conditionResult="false" option="cntDistGroup"/>
            <Target action="show" conditionResult="true" option="cntModelEffectsGroup"/>
            <Target action="hide" conditionResult="false" option="cntModelEffectsGroup"/>
        </Dependency>
        <Dependency condition="($radioLossCountType=='internalCount' &amp;&amp; $radioLossCntInternalType=='existingCount')">
            <Target action="show" conditionResult="true" option="cntModelDataGroup"/>
            <Target action="hide" conditionResult="false" option="cntModelDataGroup"/>
            <Target action="show" conditionResult="true" option="cntContainRegressor"/>
            <Target action="hide" conditionResult="false" option="cntContainRegressor"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $leftCensor=='1')">
            <Target action="show" conditionResult="true" option="leftCensorGrp"/>
            <Target action="hide" conditionResult="false" option="leftCensorGrp"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $leftCensorGrp=='leftCensorVarChoice')">
            <Target action="show" conditionResult="true" option="leftCensorVariable"/>
            <Target action="hide" conditionResult="false" option="leftCensorVariable"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $leftCensorGrp=='leftCensorValueChoice')">
            <Target action="show" conditionResult="true" option="leftCensorValue"/>
            <Target action="hide" conditionResult="false" option="leftCensorValue"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $rightCensor=='1')">
            <Target action="show" conditionResult="true" option="rightCensorGrp"/>
            <Target action="hide" conditionResult="false" option="rightCensorGrp"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $rightCensorGrp=='rightCensorVarChoice')">
            <Target action="show" conditionResult="true" option="rightCensorVariable"/>
            <Target action="hide" conditionResult="false" option="rightCensorVariable"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $rightCensorGrp=='rightCensorValueChoice')">
            <Target action="show" conditionResult="true" option="rightCensorValue"/>
            <Target action="hide" conditionResult="false" option="rightCensorValue"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $leftTruncate=='1')">
            <Target action="show" conditionResult="true" option="leftTruncateGrp"/>
            <Target action="hide" conditionResult="false" option="leftTruncateGrp"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $leftTruncateGrp=='leftTruncateVarChoice')">
            <Target action="show" conditionResult="true" option="leftTruncateVariable"/>
            <Target action="hide" conditionResult="false" option="leftTruncateVariable"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $leftTruncateGrp=='leftTruncateValueChoice')">
            <Target action="show" conditionResult="true" option="leftTruncateValue"/>
            <Target action="hide" conditionResult="false" option="leftTruncateValue"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $rightTruncate=='1')">
            <Target action="show" conditionResult="true" option="rightTruncateGrp"/>
            <Target action="hide" conditionResult="false" option="rightTruncateGrp"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $rightTruncateGrp=='rightTruncateVarChoice')">
            <Target action="show" conditionResult="true" option="rightTruncateVariable"/>
            <Target action="hide" conditionResult="false" option="rightTruncateVariable"/>
        </Dependency>
        <Dependency condition="($radioLossSevType=='newSev' &amp;&amp; $rightTruncateGrp=='rightTruncateValueChoice')">
            <Target action="show" conditionResult="true" option="rightTruncateValue"/>
            <Target action="hide" conditionResult="false" option="rightTruncateValue"/>
        </Dependency>
		<!-- when existing severity or count model contains regressors, need to specify input data.
		 Use $cntZeroInflatedModelBuilder.mixedEffectsModels[1].modelEffects.size()>0 to check number of zero-inflated effects. -->
        <Dependency condition="(($radioLossSevType=='newSev' &amp;&amp; ((($sevContinuousVar.size()&gt;0 || $sevClassVar.size()&gt;0) &amp;&amp; $radioSevModelType=='sevMainModel') ||     (($sevContinuousVar.size()&gt;0 || $sevClassVar.size()&gt;0) &amp;&amp; $radioSevModelType=='sevAdvancedModel' &amp;&amp; $sevModelBuilder.modelSummaryValues.fixedEffectsCount&gt;0) ||    $offsetVariable.size()&gt;0)) ||     ($radioLossCountType=='internalCount' &amp;&amp; $radioLossCntInternalType=='newCount' &amp;&amp;     (($radioCntModelType=='cntMainModel' &amp;&amp; ($countContinuousVar.size()&gt;0 || $countClassVar.size()&gt;0)) ||    ($radioCntModelType=='cntAdvancedModel' &amp;&amp; ($cntDistribution=='poisson' || $cntDistribution=='negbin1' || $cntDistribution=='negbin2') &amp;&amp; $cntModelBuilder.modelSummaryValues.fixedEffectsCount&gt;0) ||    ($radioCntModelType=='cntAdvancedModel' &amp;&amp; ($cntDistribution=='zeroPoisson' || $cntDistribution=='zeroNegbin') &amp;&amp; ($cntZeroInflatedModelBuilder.modelSummaryValues.fixedEffectsCount&gt;0 || $cntZeroInflatedModelBuilder.modelSummaryValues.zeroInflatedEffectsCount&gt;0)))) ||     ($radioLossSevType=='existingSev' &amp;&amp; $sevContainRegressor=='1') ||     ($radioLossCountType=='internalCount' &amp;&amp; $radioLossCntInternalType=='existingCount' &amp;&amp; $cntContainRegressor=='1') ||     $radioLossCountType=='externalCount')">
			<Target action="enable" conditionResult="true" option="inputDataGroup"/>
			<Target action="disable" conditionResult="false" option="inputDataGroup"/>
		</Dependency>
        <!-- 
		<Dependency condition="(($radioLossSevType=='newSev' &amp;&amp; ($sevContinuousVar.size()>0 || $sevClassVar.size()>0)) || ($radioLossCountType=='internalCount' &amp;&amp; ($countContinuousVar.size()>0 || $countClassVar.size()>0)) || $radioLossCountType=='externalCount')">
			<Target option="inputDataGroup" conditionResult="true" action="show"/>
			<Target option="inputDataGroup" conditionResult="false" action="hide"/>
		</Dependency>
		 -->
        <Dependency condition="($radioLossCountType=='externalCount')">
			<Target action="show" conditionResult="true" option="externalCountNote"/>
			<Target action="hide" conditionResult="false" option="externalCountNote"/>
			<Target action="show" conditionResult="true" option="inputRolesGroup"/>
			<Target action="hide" conditionResult="false" option="inputRolesGroup"/>
		</Dependency>
        <Dependency condition="($distributionList.contains('tweedie') &amp;&amp;     ((($sevClassVar.size()&gt;0 || $sevContinuousVar.size()&gt;0) &amp;&amp; $radioSevModelType=='sevMainModel') ||              (($sevClassVar.size()&gt;0 || $sevContinuousVar.size()&gt;0) &amp;&amp; $radioSevModelType=='sevAdvancedModel' &amp;&amp; $sevModelBuilder.modelSummaryValues.fixedEffectsCount&gt;0)))">
            <Target action="show" conditionResult="true" option="tweedieDistNote"/>
            <Target action="hide" conditionResult="false" option="tweedieDistNote"/>
        </Dependency>
        <Dependency condition="($radioSevModelType=='sevAdvancedModel')">
            <Target action="show" conditionResult="true" option="sevModelBuilder"/>
            <Target action="hide" conditionResult="false" option="sevModelBuilder"/>
        </Dependency>
        <Dependency condition="($radioCntModelType=='cntAdvancedModel' &amp;&amp; ($cntDistribution=='poisson' || $cntDistribution=='negbin1' || $cntDistribution=='negbin2'))">
            <Target action="show" conditionResult="true" option="cntModelBuilder"/>
            <Target action="hide" conditionResult="false" option="cntModelBuilder"/>
        </Dependency>
        <Dependency condition="($radioCntModelType=='cntAdvancedModel' &amp;&amp; ($cntDistribution=='zeroPoisson' || $cntDistribution=='zeroNegbin'))">
            <Target action="show" conditionResult="true" option="cntZeroInflatedModelBuilder"/>
            <Target action="hide" conditionResult="false" option="cntZeroInflatedModelBuilder"/>
        </Dependency>
        <Dependency condition="($cntDistribution=='zeroPoisson' || $cntDistribution=='zeroNegbin')">
            <Target action="show" conditionResult="true" option="linkFunc"/>
            <Target action="hide" conditionResult="false" option="linkFunc"/>          
            <Target action="show" conditionResult="true" option="linkFuncGrp"/>
            <Target action="hide" conditionResult="false" option="linkFuncGrp"/>          
        </Dependency>
        <Dependency condition="($radioLossCountType=='externalCount')">
			<Target action="hide" conditionResult="true" option="nReplicate"/>
			<Target action="show" conditionResult="false" option="nReplicate"/>
			<Target action="show" conditionResult="true" option="nReplicateExternal"/>
			<Target action="hide" conditionResult="false" option="nReplicateExternal"/>
		</Dependency>
        <Dependency condition="($perturbation=='1')">
			<Target action="show" conditionResult="true" option="nPerturbedSamples"/>
			<Target action="hide" conditionResult="false" option="nPerturbedSamples"/>
		</Dependency>
        <Dependency condition="($statsChoice=='customStatsChoice')">
            <Target action="show" conditionResult="true" option="summaryStats"/>
            <Target action="hide" conditionResult="false" option="summaryStats"/>
            <Target action="show" conditionResult="true" option="percentiles"/>
            <Target action="hide" conditionResult="false" option="percentiles"/>
        </Dependency>
        <Dependency condition="($statsChoice=='customStatsChoice' &amp;&amp; $perturbation=='1')">
            <Target action="show" conditionResult="true" option="perturbSummary"/>
            <Target action="hide" conditionResult="false" option="perturbSummary"/>
        </Dependency>
        <Dependency condition="($outputSum=='1')">
            <Target action="enable" conditionResult="true" option="outputSumName"/>
            <Target action="disable" conditionResult="false" option="outputSumName"/>
        </Dependency>
        <Dependency condition="($outputSum=='1')">
            <Target action="show" conditionResult="true" option="mean"/>
            <Target action="hide" conditionResult="false" option="mean"/>
            <Target action="show" conditionResult="true" option="stdDev"/>
            <Target action="hide" conditionResult="false" option="stdDev"/>
            <Target action="show" conditionResult="true" option="skewness"/>
            <Target action="hide" conditionResult="false" option="skewness"/>
            <Target action="show" conditionResult="true" option="kurtosis"/>
            <Target action="hide" conditionResult="false" option="kurtosis"/>
            <Target action="show" conditionResult="true" option="percentilesSumStat"/>
            <Target action="hide" conditionResult="false" option="percentilesSumStat"/>
        </Dependency>
        <Dependency condition="($outputSum=='1' &amp;&amp; $percentilesSumStat=='1')">
            <Target action="show" conditionResult="true" option="percentilesSelect"/>
            <Target action="hide" conditionResult="false" option="percentilesSelect"/>
        </Dependency>
        <Dependency condition="($outputSample=='1')">
            <Target action="enable" conditionResult="true" option="outputSampleName"/>
            <Target action="disable" conditionResult="false" option="outputSampleName"/>
        </Dependency>
        <Dependency condition="($outputDraw=='1')">
            <Target action="enable" conditionResult="true" option="outputDrawName"/>
            <Target action="disable" conditionResult="false" option="outputDrawName"/>
        </Dependency>
	</Dependencies>

	<Requirements>
        <Requirement condition="(!($radioLossSevType=='newSev' &amp;&amp; ($distributionList &amp;&amp; $distributionList.size()==0)))">
            <Message>Select at least one distribution.</Message>
        </Requirement>
		<!-- PROC SEVSELECT does not support offset= variable without having any scale model effects -->
        <Requirement condition="(!(!((($sevClassVar.size()&gt;0 || $sevContinuousVar.size()&gt;0) &amp;&amp; $radioSevModelType=='sevMainModel')    || (($sevClassVar.size()&gt;0 || $sevContinuousVar.size()&gt;0) &amp;&amp; $radioSevModelType=='sevAdvancedModel' &amp;&amp; $sevModelBuilder.modelSummaryValues.fixedEffectsCount&gt;0))    &amp;&amp; $offsetVariable.size()&gt;0))">
            <Message>The SEVSELECT procedure does not support offset variable without any scale model effects.</Message>
        </Requirement>
        <Requirement condition="(!($outputSum=='1' &amp;&amp; $mean=='0' &amp;&amp; $stdDev=='0' &amp;&amp; $skewness=='0' &amp;&amp; $kurtosis=='0'    &amp;&amp; ($percentilesSumStat=='0' || ($percentilesSumStat=='1' &amp;&amp; $percentilesSelect.size()==0))))">
            <Message>Select at least one summary statistics for the output data table.</Message>
        </Requirement>
	</Requirements>
	
	<CodeTemplate>
		<![CDATA[
#macro(GenerateEffect $modelEffect $numNestedLevels)
## $numNestedLevels can be 'all' or 'one'.  One extracts only the lowest-level of the hierarchy
## if the effectType is 'nested', then this is a nested effect
    #if($modelEffect.effectType == 'nested')
        ## Handle nested effects in UI5
        #if($modelEffect.levelInclusionIndices.size() > 0)
            ## Extract nested effects for all levels of the hierarchy
            #if($numNestedLevels == 'all')
                #foreach($layerNum in $modelEffect.levelInclusionIndices)
                    ## extract outer terms (remember indexing in hierarchyTerms starts at 0)
                    #set($outerTerm = $modelEffect.hierarchyTerms[$layerNum])
                    #foreach($subitem1 in $outerTerm)
$CTMUtil.toSASName($subitem1)#if($foreach.count < $outerTerm.size())*#end#end
(#foreach($subterm2 in $modelEffect.hierarchyTerms)
                        #if($foreach.index < $layerNum)
#foreach($subitem2 in $subterm2)
$CTMUtil.toSASName($subitem2)#if($foreach.count < $subterm2.size())*#end#end#if($foreach.index < ($layerNum) - 1) #end
                        #end
                    #end)
                #end
            ## Extract nested effects for only the lowest level of the hierarchy (for subject and group effects)
            #elseif($numNestedLevels == 'one')
                ## Outer term corresponds to the last (lowest) in the hierarchy
                #set($layerNum =  $modelEffect.levelInclusionIndices[$MathTool.sub($modelEffect.levelInclusionIndices.size(), 1)])
                #set($outerTerm = $modelEffect.hierarchyTerms[$layerNum])
                #foreach($subitem1 in $outerTerm)
$CTMUtil.toSASName($subitem1)#if($foreach.count < $outerTerm.size())*#end#end
(#foreach($subterm2 in $modelEffect.hierarchyTerms)
                    #if($foreach.index < $layerNum)
#foreach($subitem2 in $subterm2)
$CTMUtil.toSASName($subitem2)#if($foreach.count < $subterm2.size())*#end#end#if($foreach.index < ($layerNum) - 1) #end
                    #end
                #end)
            #end

        ## Handle pre-UI5 nested effects
        #elseif($modelEffect.memberSet1.size() > 0)
            ## extract outer terms
            #foreach($subitem1 in $modelEffect.memberSet1)
$CTMUtil.toSASName($subitem1)#if($foreach.count < $modelEffect.memberSet1.size())*#end#end
(#foreach($subitem2 in $modelEffect.memberSet2)
$CTMUtil.toSASName($subitem2)#if($foreach.count < $modelEffect.memberSet2.size())*#end#end)
        #end
## handle 'main' or 'interaction' effects
    #else
        ## Extract effects from memberSet1
        #foreach($subitem in $modelEffect.memberSet1)
$CTMUtil.toSASName($subitem)#if($foreach.count < $modelEffect.memberSet1.size())*#end#end
    #end
#end
############ End of GenerateEffect macro ############

#macro(GenerateEffectCAS $modelEffect $numNestedLevels)
## $numNestedLevels can be 'all' or 'one'.  One extracts only the lowest-level of the hierarchy
## if the effectType is 'nested', then this is a nested effect
    #if($modelEffect.effectType == 'nested')
        ## Handle nested effects in UI5
        #if($modelEffect.levelInclusionIndices.size() > 0)
            ## Extract nested effects for all levels of the hierarchy
            #if($numNestedLevels == 'all')
                #foreach($layerNum in $modelEffect.levelInclusionIndices)
                    ## extract outer terms (remember indexing in hierarchyTerms starts at 0)
                    #set($outerTerm = $modelEffect.hierarchyTerms[$layerNum])
                    {vars={
					#foreach($subitem1 in $outerTerm)
$CTMUtil.doubleQuoteString($subitem1)#if($foreach.count < $outerTerm.size()),#end#end}, nest={
#foreach($subterm2 in $modelEffect.hierarchyTerms)
						#if($foreach.index < $layerNum)
#foreach($subitem2 in $subterm2)
$CTMUtil.doubleQuoteString($subitem2)#if($foreach.count < $subterm2.size()),#end#end#if($foreach.index < ($layerNum) - 1),#end
                        #end
                    #end}#if($outerTerm.size()>1), interaction="CROSS"#end}
					#if($foreach.hasNext),#end
                #end
            ## Extract nested effects for only the lowest level of the hierarchy (for subject and group effects)
            #elseif($numNestedLevels == 'one')
                ## Outer term corresponds to the last (lowest) in the hierarchy
                #set($layerNum =  $modelEffect.levelInclusionIndices[$MathTool.sub($modelEffect.levelInclusionIndices.size(), 1)])
                #set($outerTerm = $modelEffect.hierarchyTerms[$layerNum])
				{vars={
                #foreach($subitem1 in $outerTerm)
$CTMUtil.doubleQuoteString($subitem1)#if($foreach.count < $outerTerm.size()),#end#end}, nest={
#foreach($subterm2 in $modelEffect.hierarchyTerms)
                    #if($foreach.index < $layerNum)
#foreach($subitem2 in $subterm2)
$CTMUtil.doubleQuoteString($subitem2)#if($foreach.count < $subterm2.size()),#end#end#if($foreach.index < ($layerNum) - 1), #end
                    #end
                #end}#if($outerTerm.size()>1), interaction="CROSS"#end}
            #end
			
        ## Handle pre-UI5 nested effects
        #elseif($modelEffect.memberSet1.size() > 0)
            ## extract outer terms
			{vars={#foreach($subitem1 in $modelEffect.memberSet1)
$CTMUtil.doubleQuoteString($subitem1)#if($foreach.hasNext),#end#end}, nest={#foreach($subitem2 in $modelEffect.memberSet2)
$CTMUtil.doubleQuoteString($subitem2)#if($foreach.hasNext),#end#end}#if($modelEffect.memberSet1.size()>1), interaction="CROSS"#end}
		#end
## handle 'main' or 'interaction' effects
    #else
		#if($modelEffect.effectType == 'interaction') ## 'interaction' effects
			{vars={
			## Extract effects from memberSet1
			#foreach($subitem in $modelEffect.memberSet1)
$CTMUtil.doubleQuoteString($subitem)#if($foreach.count < $modelEffect.memberSet1.size()),#end#end}, interaction="CROSS"}
		#elseif($modelEffect.effectType == 'main') ## 'main' effects
			{vars={
			#foreach($subitem in $modelEffect.memberSet1)
$CTMUtil.doubleQuoteString($subitem)#if($foreach.count < $modelEffect.memberSet1.size()),#end#end}}
		#end
    #end
#end
############ End of GenerateEffectCAS macro ############

ods noproctitle;
ods graphics / imagemap=on;

#if($radioLossSevType=='newSev')
	#set($SevOutputCASLib=$severity.getLibrary())
#end
#if($radioLossCountType=='internalCount' && $radioLossCntInternalType=='newCount')
	#set($CountOutputCASLib=$count.getLibrary())
#end

#set($inputDataNeeded=0)
#if(($radioLossSevType=='newSev' && ((($sevContinuousVar.size()>0 || $sevClassVar.size()>0) && $radioSevModelType=='sevMainModel') || 
		(($sevContinuousVar.size()>0 || $sevClassVar.size()>0) && $radioSevModelType=='sevAdvancedModel' && $sevModelBuilder.modelSummaryValues.fixedEffectsCount>0) || $offsetVariable.size()>0)) 
	|| ($radioLossCountType=='internalCount' && $radioLossCntInternalType=='newCount' && 
		(($radioCntModelType=='cntMainModel' && ($countContinuousVar.size()>0 || $countClassVar.size()>0)) ||
		($radioCntModelType=='cntAdvancedModel' && ($cntDistribution=='poisson' || $cntDistribution=='negbin1' || $cntDistribution=='negbin2') && $cntModelBuilder.modelSummaryValues.fixedEffectsCount>0) ||
		($radioCntModelType=='cntAdvancedModel' && ($cntDistribution=='zeroPoisson' || $cntDistribution=='zeroNegbin') && ($cntZeroInflatedModelBuilder.modelSummaryValues.fixedEffectsCount>0 || $cntZeroInflatedModelBuilder.modelSummaryValues.zeroInflatedEffectsCount>0)))) 
	|| ($radioLossSevType=='existingSev' && $sevContainRegressor=='1') 
	|| ($radioLossCountType=='internalCount' && $radioLossCntInternalType=='existingCount' && $cntContainRegressor=='1') 
	|| $radioLossCountType=='externalCount')
	#set($inputDataNeeded=1)
#end

### scalemodel statement needed?
#set($scaleModelNeeded=0)
#if(($sevClassVar.size()>0 || $sevContinuousVar.size()>0) && $radioSevModelType=='sevMainModel')
#set($scaleModelNeeded=1)
#end
#if(($sevClassVar.size()>0 || $sevContinuousVar.size()>0) && $radioSevModelType=='sevAdvancedModel' && $sevModelBuilder.modelSummaryValues.fixedEffectsCount>0)
#set($scaleModelNeeded=1)
#end
#if($offsetVariable.size()>0)
#set($scaleModelNeeded=1)
#end

## count model statement
#if($cntDistribution=='poisson' || $cntDistribution=='negbin1' || $cntDistribution=='negbin2')
    #set($theCntModelBuilder=$cntModelBuilder)
#else 
    #set($theCntModelBuilder=$cntZeroInflatedModelBuilder)
#end

#set($cntModelStmt="
#if($theCntModelBuilder && $theCntModelBuilder.mixedEffectsModels)
    #foreach($model in $theCntModelBuilder.mixedEffectsModels)
        #if($model.emtype=='FIXED' || $model.emtype=='MEANS')
            #if($model.modelEffects.size()>0)
                #foreach($modelEffect in $model.modelEffects)
					#GenerateEffect($modelEffect 'all')
                #end
            #end
        #end
    #end    ## end #foreach( $model in $theCntModelBuilder.mixedEffectsModels )
#else  ## main effects model
    #foreach($item in $countContinuousVar) $item #end
    #foreach($item in $countClassVar) $item #end
#end
")

## ZEROMODEL statement
#if($cntDistribution=='zeroPoisson' || $cntDistribution=='zeroNegbin')
#set($cntZeromodelStmt="
#if($theCntModelBuilder && $theCntModelBuilder.mixedEffectsModels)
    #foreach($model in $theCntModelBuilder.mixedEffectsModels)
        #if($model.emtype=='ZEROINFLATED')
            #if($model.modelEffects.size()>0)
                #foreach($modelEffect in $model.modelEffects)
					#GenerateEffect($modelEffect 'all')
                #end
            #end                   
        #end
    #end    ## end #foreach($model in $theCntModelBuilder.mixedEffectsModels)
#else  ## main effects model
    #foreach($item in $countContinuousVar) $item #end
    #foreach($item in $countClassVar) $item #end
#end
")
#end

## shared NOINT option
#set($nointOption="
#if($theCntModelBuilder && $theCntModelBuilder.mixedEffectsModels)
    #if($theCntModelBuilder.mixedEffectsModels.get(0).intercept=='False') noint#end
#end
")

## pctlpts select list
#if($percentilesSumStat=='1' && $percentilesSelect.size()>0) #set($percentilesList="
	#if($percentilesSelect.contains('pointFiveP')) 0.5,#end
	#if($percentilesSelect.contains('oneP')) 1,#end
	#if($percentilesSelect.contains('fiveP')) 5,#end
	#if($percentilesSelect.contains('tenP')) 10,#end
	#if($percentilesSelect.contains('twentyFiveP')) 25,#end
	#if($percentilesSelect.contains('fiftyP')) 50,#end
	#if($percentilesSelect.contains('seventyFiveP')) 75,#end
	#if($percentilesSelect.contains('ninetyP')) 90,#end
	#if($percentilesSelect.contains('ninetyFiveP')) 95,#end
	#if($percentilesSelect.contains('ninetyNineP')) 99,#end
	#if($percentilesSelect.contains('nineNineFiveP')) 99.5,#end
")
#set($percentilesList=$percentilesList.trim())
#set($stringLength=$MathTool.sub($percentilesList.length(),1))
#set($percentilesList=$percentilesList.substring(0,$stringLength))
#end

## plot needed?
#set($plotNeeded=0)
#if($pdfPlot=='1' || $edfPlot=='1') #set($plotNeeded=1) #end

## temporary caslib needed?
#set($tmpcasNeeded=0)
#if($plotNeeded && $outputSample=='0') #set($tmpcasNeeded=1) #end
#if($tmpcasNeeded=='1')
	libname _tmpcas_ cas caslib="CASUSER";
	#set($tempCASLib="_tmpcas_")  ## temporary CAS engine libref
#end

############ Econometrics Procedures ############
#if($proc=='procEconometrics')

### proc sevselect code
#if($radioLossSevType=='newSev')
## Fit the loss severity model ##
/* $fitSevModelMsg */
proc sevselect data=$severity #if($severity.getWhereClause()!="") (where=($severity.getWhereClause())) #end 
#if($radioSevModelType=='sevMainModel')
	#if($sevClassVar.size()>0) outstore=${SevOutputCASLib}.sevstore35912 #else outest=${SevOutputCASLib}.sevest35912 #end
#else
	#if($sevModelBuilder.modelSummaryValues.fixedContinuousMainEffectsCount<$sevModelBuilder.modelSummaryValues.fixedEffectsCount)
		outstore=${SevOutputCASLib}.sevstore35912
	#else
		outest=${SevOutputCASLib}.sevest35912
	#end
#end
print=none;
	loss #foreach($item in $lossSeverity) $item #end
#if($leftCensor=='1' || $rightCensor=='1' || $leftTruncate=='1' || $rightTruncate=='1')
	/
    #if($leftCensor=='1') leftcensored=#if($leftCensorGrp=='leftCensorVarChoice') #foreach($item in $leftCensorVariable) $item #end #elseif($leftCensorGrp=='leftCensorValueChoice') $leftCensorValue #end #end
    #if($rightCensor=='1') rightcensored=#if($rightCensorGrp=='rightCensorVarChoice') #foreach($item in $rightCensorVariable) $item #end #elseif($rightCensorGrp=='rightCensorValueChoice') $rightCensorValue #end #end
    #if($leftTruncate=='1') lefttruncated=#if($leftTruncateGrp=='leftTruncateVarChoice') #foreach($item in $leftTruncateVariable) $item #end #elseif($leftTruncateGrp=='leftTruncateValueChoice') $leftTruncateValue #end #end
    #if($rightTruncate=='1') righttruncated=#if($rightTruncateGrp=='rightTruncateVarChoice') #foreach($item in $rightTruncateVariable) $item #end #elseif($rightTruncateGrp=='rightTruncateValueChoice') $rightTruncateValue #end #end
#end
;
## CLASS statement before SCALEMODEL statement
#if($sevClassVar.size()>0) class #foreach($item in $sevClassVar) $item #end; #end
## SCALEMODEL statement
#if($scaleModelNeeded=='1') scalemodel
    #if($radioSevModelType=='sevMainModel')
        #foreach($item in $sevContinuousVar) $item #end #foreach($item in $sevClassVar) $item #end
    #elseif($radioSevModelType=='sevAdvancedModel')
        #if($sevModelBuilder.mixedEffectsModels)
            #foreach($model in $sevModelBuilder.mixedEffectsModels)
                #if($model.emtype=='FIXED')
                    #if($model.modelEffects.size()>0)
                        #foreach($modelEffect in $model.modelEffects)
                            #GenerateEffect($modelEffect 'all')
                        #end
                    #end
                #end
            #end
        #end ##end #if($sevModelBuilder.mixedEffectsModels)
    #end
    #if($offsetVariable.size()>0)
		/ offset=#foreach($item in $offsetVariable) $item #end
    #end    
;
#end
	dist #foreach($item in $distributionList) $item #end;
run;
#end

### proc cntselect code
#if($radioLossCountType=='internalCount' && $radioLossCntInternalType=='newCount')
## Fit the loss count model ##
/* $fitCntModelMsg */
proc cntselect data=$count #if($count.getWhereClause()!="") (where=($count.getWhereClause())) #end store=${CountOutputCASLib}.countStore26942 noprint;
	#if($countClassVar.size()>=1) class #foreach($item in $countClassVar) $item #end; #end
	model #foreach($item in $lossCount) $item #end = $cntModelStmt.trim()
	/ dist=
	#if($cntDistribution=='poisson') poisson 
	#elseif($cntDistribution=='negbin1') negbin(p=1) 
	#elseif($cntDistribution=='negbin2') negbin(p=2) 
	#elseif($cntDistribution=='zeroPoisson') zipoisson 
	#elseif($cntDistribution=='zeroNegbin') zinegbin #end
	$nointOption;
#if($cntDistribution=='zeroPoisson' || $cntDistribution=='zeroNegbin')
	zeromodel #foreach($item in $lossCount) $item#end ~ $cntZeromodelStmt.trim()
		/ link = #if($linkFuncGrp=='logistic') logistic #elseif($linkFuncGrp=='normal') normal #end;
#end
run;
#end

### proc ccdm code
## Estimate the distribution of the aggregate loss ## 
/* $aggLossEstMsg */
proc ccdm 
#if($radioLossSevType=='newSev')
	#if($radioSevModelType=='sevMainModel')
		#if($sevClassVar.size()>0) severitystore=${SevOutputCASLib}.sevstore35912 #else severityest=${SevOutputCASLib}.sevest35912 #end
	#else
		#if($sevModelBuilder.modelSummaryValues.fixedContinuousMainEffectsCount<$sevModelBuilder.modelSummaryValues.fixedEffectsCount)
			severitystore=${SevOutputCASLib}.sevstore35912
		#else
			severityest=${SevOutputCASLib}.sevest35912
		#end
	#end
#else
	severitystore=$sevModelData 
#end
	#if($radioLossCountType=='internalCount') #if($radioLossCntInternalType=='newCount') countstore=${CountOutputCASLib}.countStore26942 #else countstore=$cntModelData #end #end
	#if($input) data=$input #if($input.getWhereClause()!="")(where=($input.getWhereClause()))#end#end
	seed=13579
	#if($statsChoice=='noneChoice') print=none
	#elseif($statsChoice=='customStatsChoice')
		#if($summaryStats=='1' || $percentiles=='1' || $perturbSummary=='1')
			print(only)=(
				#if($summaryStats=='1') summarystatistics #end #if($percentiles=='1') percentiles #end #if($perturbSummary=='1') perturbsummary #end
			)
		#end
	#elseif($statsChoice=='defaultStatsChoice') print(only)=(summarystatistics percentiles)
	#end
	#if($radioLossCountType=='externalCount') 
		#if($nReplicateExternal!='1' && $nReplicateExternal!='') nreplicates=$nReplicateExternal #end
	#else
		#if($nReplicate!='100000' && $nReplicate!='') nreplicates=$nReplicate #end
	#end
	#if($maxCount!='1000' && $maxCount!='') maxcountdraw=$maxCount #end
	#if($perturbation=='1')
		nperturbedsamples=$nPerturbedSamples
	#end
	#if($outputDraw=='1')
		outdraw=$outputDrawName
	#end
	;
#if($radioLossSevType=='newSev')
	severitymodel #foreach($item in $distributionList) $item #end;
#end
#if($radioLossCountType=='externalCount')
	externalcounts count=#foreach($item in $lossCountInput) $item #end 
		#if($repId.size()>0) id=#foreach($item in $repId) $item #end #end;
#end
	## OUTPUT statements
#if($outputSum=='1')
	outsum out=$outputSumName #if($mean=='1') mean #end #if($stdDev=='1') stddev #end #if($skewness=='1') skewness #end #if($kurtosis=='1') kurtosis #end
		#if($percentilesSumStat=='1' && $percentilesSelect.size()>0) pctlpts=$percentilesList #end;
#end
#if($tmpcasNeeded=='1')
	output outsample=${tempCASLib}.tempSample;
#else 
	#if($outputSample=='1') output outsample=$outputSampleName; #end
#end
## if none of the statistics choices is checked
#if($statsChoice=='customStatsChoice' && !($summaryStats=='1' || $percentiles=='1' || $perturbSummary=='1'))
	##ods exclude specific statistics;
	display SummaryStatistics Percentiles #if($perturbation=='1') PerturbedPctlSummary PerturbedSummary #end / exclude;
#end
run;

############ PROC CAS ############
#elseif($proc=='procCas')

## get the SAS libref of the session where 'svrtdist' CAS table should live
#if($radioLossSevType=='newSev')
	#set($sevDataSASLib=$severity.getLibrary())
	#set($sevDataSASTable=$severity.get("table"))
#else
	#set($sevDataSASLib=$sevModelData.getLibrary())
	#set($sevDataSASTable=$sevModelData.get("table"))
#end
/* $commentMacro */
#### Macro to check the existence of the 'svrtdist' CAS table and load it if not available
%macro loadSVRTDIST;
proc cas;
	session %sysfunc(getlsessref($sevDataSASLib));
	unset logs;
	loaded = 0;
	/* $commentSvrtdistLoaded */
	#### Check if 'svrtdist' is already loaded
	tableExists result=r / name="svrtdist";
	if (r.exists ne 0) then loaded = 1;
	else do;
		/* $commentSampleCaslib */
		#### Try to load 'svrtdist' from the 'samples' caslib
		c = 'samples';
		queryCaslib result=r / caslib=c;
		if (r[c]) then do;
			loadtable status=s / caslib=c path="predef_svrtdist.sashdat" casout="svrtdist";
			if (s.statusCode = 0) then loaded = 1;
		end;
		if (loaded = 0) then do;
			/* $commentPublicCaslib */
			#### Try to load 'svrtdist' from the 'public' caslib
			c = 'public';
			queryCaslib result=r / caslib=c;
			if (r[c]) then do;
				loadtable status=s / caslib=c path="predef_svrtdist.sashdat" casout="svrtdist";
				if (s.statusCode = 0) then loaded = 1;
			end;
		end;
	end;
	call symputx('predefLoaded', loaded, 'l');
	set logs;
run;
quit;

%if &predefLoaded=0 %then %do;
	/* $commentRunSevselect */
	#### If 'svrtdist' could not be loaded from a caslib, create it by using PROC SEVSELECT
	proc sevselect;
		dist _predefined_ tweedie stweedie / validateonly(noscalemodel);
	run;
%end;
%mend;

%loadSVRTDIST;

### severity action code
#if($radioLossSevType=='newSev')

#set($casSevModelEffects="
#if($sevModelBuilder && $sevModelBuilder.mixedEffectsModels)
	effects={
    #foreach($model in $sevModelBuilder.mixedEffectsModels)
        #if($model.emtype=='FIXED')
            #if($model.modelEffects.size()>0)
                #foreach($modelEffect in $model.modelEffects)
					#GenerateEffectCAS($modelEffect 'all')#if($foreach.hasNext),#end
                #end
            #end
        #end
    #end    ## end #foreach($model in $sevModelBuilder.mixedEffectsModels)
	}
#else
	effects={{vars={
    #foreach($item in $sevContinuousVar) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext || $sevClassVar.size()>0),#end#end
    #foreach($item in $sevClassVar) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext),#end#end
	}}}
#end
")

## Fit the loss severity model ##
/* $fitSevModelMsg */
proc cas;
	session %sysfunc(getlsessref($sevDataSASLib));
	action severity.severity / 
		table={name="$sevDataSASTable" caslib="%sysfunc(getlcaslib($sevDataSASLib))" #if($severity.getWhereClause()!="") where=$CTMUtil.doubleQuoteString($severity.getWhereClause()) #end}
		## LOSS statement
		lossvariables={#if($lossSeverity.size()>0) {name=#foreach($item in $lossSeverity) $CTMUtil.doubleQuoteString($item.get('value'))#end role="target"}#end
			#if($leftCensor=='1' && $leftCensorGrp=='leftCensorVarChoice') {name=#foreach($item in $leftCensorVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="lc"}#end
			#if($rightCensor=='1' && $rightCensorGrp=='rightCensorVarChoice') {name=#foreach($item in $rightCensorVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="rc"}#end
			#if($leftTruncate=='1' && $leftTruncateGrp=='leftTruncateVarChoice') {name=#foreach($item in $leftTruncateVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="lt"}#end
			#if($rightTruncate=='1' && $rightTruncateGrp=='rightTruncateVarChoice') {name=#foreach($item in $rightTruncateVariable) $CTMUtil.doubleQuoteString($item.get('value'))#end role="rt"}#end
		}
		#if(($leftCensor=='1' && $leftCensorGrp=='leftCensorValueChoice') || ($rightCensor=='1' && $rightCensorGrp=='rightCensorValueChoice') || ($leftTruncate=='1' && $leftTruncateGrp=='leftTruncateValueChoice') || ($rightTruncate=='1' && $rightTruncateGrp=='rightTruncateValueChoice'))
			ctlimits={#if($leftCensor=='1' && $leftCensorGrp=='leftCensorValueChoice'){role="lc" limit=$leftCensorValue} #end
			#if($rightCensor=='1' && $rightCensorGrp=='rightCensorValueChoice'){role="rc" limit=$rightCensorValue} #end
			#if($leftTruncate=='1' && $leftTruncateGrp=='leftTruncateValueChoice'){role="lt" limit=$leftTruncateValue} #end
			#if($rightTruncate=='1' && $rightTruncateGrp=='rightTruncateValueChoice'){role="rt" limit=$rightTruncateValue} #end}
		#end
		funcdef={name="svrtdist"} 
		distributions={#foreach($item in $distributionList) "$item" #end}
		## CLASS statement before SCALEMODEL statement
		#if($sevClassVar.size()>0) class={{vars={#foreach($item in $sevClassVar) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext),#end#end}}}#end
		#if($scaleModelNeeded=='1') scalemodel={$casSevModelEffects
			#if($offsetVariable.size()>0) offset=#foreach($item in $offsetVariable) $CTMUtil.doubleQuoteString($item.get('value')) #end#end}
		#end
		display={excludeall=true suppresswarnings=true} outdetaillevel=0
		#if($radioSevModelType=='sevMainModel')
			#if($sevClassVar.size()>0) store={name="sevstore35912" caslib="%sysfunc(getlcaslib($sevDataSASLib))" replace=true} storecovariance=false
			#else outest={table={name="sevest35912" caslib="%sysfunc(getlcaslib($sevDataSASLib))" replace=true}}
			#end
		#else
			#if($sevModelBuilder.modelSummaryValues.fixedContinuousMainEffectsCount<$sevModelBuilder.modelSummaryValues.fixedEffectsCount)
				store={name="sevstore35912" caslib="%sysfunc(getlcaslib($sevDataSASLib))" replace=true} storecovariance=false
			#else
				outest={table={name="sevest35912" caslib="%sysfunc(getlcaslib($sevDataSASLib))" replace=true}}
			#end
		#end
	;
run;
#end

### countregFitModel action code
#if($radioLossCountType=='internalCount' && $radioLossCntInternalType=='newCount')
#set($cntDataSASLib=$count.getLibrary())
#set($cntDataSASTable=$count.get("table"))

#set($casCntModelEffects="
#if($theCntModelBuilder && $theCntModelBuilder.mixedEffectsModels)
	effects={
    #foreach($model in $theCntModelBuilder.mixedEffectsModels)
        #if($model.emtype=='FIXED' || $model.emtype=='MEANS')
            #if($model.modelEffects.size()>0)
                #foreach($modelEffect in $model.modelEffects)
					#GenerateEffectCAS($modelEffect 'all')#if($foreach.hasNext),#end
                #end
            #end
        #end
    #end    ## end #foreach($model in $theCntModelBuilder.mixedEffectsModels)
	}
#else  ## main effects model
	effects={{vars={
    #foreach($item in $countContinuousVar) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext || $countClassVar.size()>0),#end#end
    #foreach($item in $countClassVar) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext),#end#end
	}}}
#end
")

#if($cntDistribution=='zeroPoisson' || $cntDistribution=='zeroNegbin')
#set($casCntZeroModelEffects="
#if($theCntModelBuilder && $theCntModelBuilder.mixedEffectsModels)
	effects={
    #foreach($model in $theCntModelBuilder.mixedEffectsModels)
        #if($model.emtype=='ZEROINFLATED')
            #if($model.modelEffects.size()>0)
                #foreach($modelEffect in $model.modelEffects)
					#GenerateEffectCAS($modelEffect 'all')#if($foreach.hasNext),#end
                #end
            #end                   
        #end
    #end    ## end #foreach($model in $theCntModelBuilder.mixedEffectsModels)
	}
#else  ## main effects model
	effects={{vars={
    #foreach($item in $countContinuousVar) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext || $countClassVar.size()>0),#end#end
    #foreach($item in $countClassVar) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext),#end#end
	}}}
#end
")
#end

## Fit the loss count model ##
/* $fitCntModelMsg */
proc cas;
	session %sysfunc(getlsessref($cntDataSASLib));
	action countreg.countregfitmodel /
		table={name="$cntDataSASTable" caslib="%sysfunc(getlcaslib($cntDataSASLib))" #if($count.getWhereClause()!="") where=$CTMUtil.doubleQuoteString($count.getWhereClause()) #end}
		#if($countClassVar.size()>0) class={{vars={#foreach($item in $countClassVar) $CTMUtil.doubleQuoteString($item.get('value'))#if($foreach.hasNext),#end#end}}}#end
		model={depvars={{name=#foreach($item in $lossCount) $CTMUtil.doubleQuoteString($item.get('value'))#end}} $casCntModelEffects
			modeloptions={modeltype=#if($cntDistribution=='zeroPoisson') "zip"
				#elseif($cntDistribution=='zeroNegbin') "zinb" 
				#else "$cntDistribution"
				#end
				#if($theCntModelBuilder && $theCntModelBuilder.mixedEffectsModels && $theCntModelBuilder.mixedEffectsModels.get(0).intercept=='False')
					noint=true
				#else noint=false#end}
		}
		#if($cntDistribution=='zeroPoisson' || $cntDistribution=='zeroNegbin')
			zeromodel={depvars={{name=#foreach($item in $lossCount) $CTMUtil.doubleQuoteString($item.get('value'))#end}}
				$casCntZeroModelEffects type="ZERO"
				zeromodeloptions={link="$linkFuncGrp"}
			}
		#end
		display={excludeall=true suppresswarnings=true}
		store={name="countStore26942" caslib="%sysfunc(getlcaslib($cntDataSASLib))" replace=true}
	;
run;
#end

### cdm action code
#if($inputDataNeeded=='1')
	#set($inputDataSASLib=$input.getLibrary())
	#set($inputDataSASTable=$input.get("table"))
#end
#if($inputDataNeeded=='1')
	#set($cdmSessionCasLib=$inputDataSASLib)
#elseif($radioLossSevType=='newSev' && $sevContinuousVar.size()==0 && $sevClassVar.size()==0 && $offsetVariable.size()==0)
	#set($cdmSessionCasLib=$severity.getLibrary()) 
#elseif($radioLossSevType=='existingSev' && $sevContainRegressor=='0')
	#set($cdmSessionCasLib=$sevModelData.getLibrary()) 
#elseif($radioLossCountType=='internalCount' && $radioLossCntInternalType=='newCount' && $countContinuousVar.size()==0 && $countClassVar.size()==0)
	#set($cdmSessionCasLib=$count.getLibrary()) 
#elseif($radioLossCountType=='internalCount' && $radioLossCntInternalType=='existingCount' && $cntContainRegressor=='0')
	#set($cdmSessionCasLib=$cntModelData.getLibrary()) 
#end
## check if any CAS table is created, no matter it is temporary or not  ##
#set($casTableCreated=0)
#if($tmpcasNeeded=='1' || $outputSum=='1' || $outputDraw=='1')
	#set($casTableCreated=1)
#end
## Estimate the distribution of the aggregate loss ## 
/* $aggLossEstMsg */
proc cas;
	session %sysfunc(getlsessref($cdmSessionCasLib));
	action cdm.cdm / 
		severitydefinitions={name="svrtdist"}
	#if($radioLossSevType=='newSev')
		severitydistributions={#foreach($item in $distributionList) "$item" #end}
	#else
		severitydistributions={}
	#end
	#if($radioLossSevType=='newSev')
		#if($radioSevModelType=='sevMainModel')
			#if($sevClassVar.size()>0) severitystore={name="sevstore35912" caslib="%sysfunc(getlcaslib($sevDataSASLib))"}
			#else severityest={name="sevest35912" caslib="%sysfunc(getlcaslib($sevDataSASLib))"} #end
		#else
			#if($sevModelBuilder.modelSummaryValues.fixedContinuousMainEffectsCount<$sevModelBuilder.modelSummaryValues.fixedEffectsCount)
				severitystore={name="sevstore35912" caslib="%sysfunc(getlcaslib($sevDataSASLib))"}
			#else
				severityest={name="sevest35912" caslib="%sysfunc(getlcaslib($sevDataSASLib))"}
			#end
		#end
	#else
		severitystore={name="$sevDataSASTable" caslib="%sysfunc(getlcaslib($sevDataSASLib))"}
	#end
	#if($radioLossCountType=='internalCount')
		#if($radioLossCntInternalType=='newCount')
			countstore={name="countStore26942" caslib="%sysfunc(getlcaslib($CountOutputCASLib))"}
		#else
			countstore={name="$cntModelData.getTable()" caslib="%sysfunc(getlcaslib($cntModelData.getLibrary()))"}
		#end
	#end
	#if($inputDataNeeded=='1')
		table={name="$inputDataSASTable" caslib="%sysfunc(getlcaslib($inputDataSASLib))" #if($input.getWhereClause()!="") where=$CTMUtil.doubleQuoteString($input.getWhereClause()) #end}
	#end
	#if($radioLossCountType=='externalCount')
		countvariable=#foreach($item in $lossCountInput) $CTMUtil.doubleQuoteString($item.get('value')) #end 
		#if($repId.size()>0) idvariable=#foreach($item in $repId) $CTMUtil.doubleQuoteString($item.get('value')) #end #end
	#end
	#if($maxCount!='1000' && $maxCount!='') maxcountdraw=$maxCount #end
	#if($perturbation=='1')
		nperturbedsamples=$nPerturbedSamples
	#end	
	#if($radioLossCountType=='externalCount') 
		#if($nReplicateExternal!='1' && $nReplicateExternal!='') nreplicates=$nReplicateExternal #end
	#else
		#if($nReplicate!='') nreplicates=$nReplicate #end
	#end
	seed=13579
	#if($statsChoice=='noneChoice') display={excludeall=true suppresswarnings=true}
	#elseif($statsChoice=='customStatsChoice')
		#if($summaryStats=='1' || $percentiles=='1' || $perturbSummary=='1')
			display={names={#if($inputDataNeeded=='1')"DataSet" "DataSummary" #end "CompoundInfo" #if($casTableCreated=='1')"OutputCasTables" #end #if($summaryStats=='1') "SummaryStatistics" #end 
				#if($percentiles=='1') "Percentiles" #end #if($perturbSummary=='1') "PerturbedSummary" "PerturbedPctlSummary" #end} suppresswarnings=true}
		#else
			display={names={"SummaryStatistics" "Percentiles" #if($perturbation=='1')"PerturbedSummary" "PerturbedPctlSummary" #end} exclude=true}
		#end
	#elseif($statsChoice=='defaultStatsChoice') display={names={#if($inputDataNeeded=='1')"DataSet" "DataSummary" #end "CompoundInfo" #if($casTableCreated=='1')"OutputCasTables" #end "SummaryStatistics" "Percentiles"} suppresswarnings=true}
	#end
	## OUTPUT statements
	#if($tmpcasNeeded=='1')
		output={outsample={name="tempSample" caslib="%sysfunc(getlcaslib($tempCASLib))" replace=true}}
	#else 
		#if($outputSample=='1') output={outsample={name="$outputSampleName.getTable()" caslib="%sysfunc(getlcaslib($outputSampleName.getLibrary()))" replace=true}} #end
	#end
	#if($outputSum=='1')
		outsum={outSummary={name="$outputSumName.getTable()" caslib="%sysfunc(getlcaslib($outputSumName.getLibrary()))" replace=true}
			#if($mean=='1' || $stdDev=='1' || $skewness=='1' || $kurtosis=='1')
				summarystatistics={#if($mean=='1'){statistic='MEAN'}#end #if($stdDev=='1'){statistic='STDDEV'}#end #if($skewness=='1'){statistic='SKEWNESS'}#end #if($kurtosis=='1'){statistic='KURTOSIS'}#end}
			#end
			#if($percentilesSumStat=='1' && $percentilesSelect.size()>0) 
				percentiles={#if($percentilesSelect.contains('pointFiveP')){percentile=0.5 variable="P0_5"} #end
					#if($percentilesSelect.contains('oneP')){percentile=1 variable="P01"} #end
					#if($percentilesSelect.contains('fiveP')){percentile=5 variable="P05"} #end
					#if($percentilesSelect.contains('tenP')){percentile=10 variable="P10"} #end
					#if($percentilesSelect.contains('twentyFiveP')){percentile=25 variable="Q1"} #end
					#if($percentilesSelect.contains('fiftyP')){percentile=50 variable="MEDIAN"} #end
					#if($percentilesSelect.contains('seventyFiveP')){percentile=75 variable="Q3"} #end
					#if($percentilesSelect.contains('ninetyP')){percentile=90 variable="P90"} #end
					#if($percentilesSelect.contains('ninetyFiveP')){percentile=95 variable="P95"} #end
					#if($percentilesSelect.contains('ninetyNineP')){percentile=99 variable="P99"} #end
					#if($percentilesSelect.contains('nineNineFiveP')){percentile=99.5 variable="P99_5"} #end
				}
			#end
		}
	#end
	#if($outputDraw=='1')
		outdraw={name="$outputDrawName.getTable()" caslib="%sysfunc(getlcaslib($outputDrawName.getLibrary()))" replace=true}	
	#end
	;
run;

#end

#if($plotNeeded=='1')
## CDM plot macro ##
%macro makeCDMPlots(castable=, edfalpha=0.05);
	## Check if _drawid_ variable exists ##
	/* $drawidExistMsg */
	%let varlistdata=varlist;
	proc contents data=&castable noprint out=&varlistdata.;
	quit;
	%let drawIdExists=0;
	data _null_;
		set &varlistdata.(where=(name="_DRAWID_")) end=lastobs;
		if (lastobs) then call symputx("drawIdExists", "1");
	run;

    ## Get the list of severity distributions ##
	/* $getSevDistMsg */
    proc sql noprint;
        select distinct _SEVERITYMODEL_ into :dist_list separated by ' ' from &castable;
        select count(distinct _SEVERITYMODEL_) into :num_dist from &castable;
    quit;

 	%let tempData=cdmplotdata;
    %let samplevar=_AGGSEV_;

    %do i = 1 %to &num_dist.;   
		## Bring back to client the unperturbed sample for the specified severity distribution ##
		/* $getUnperturbedMsg */
        %let sevmodel=%scan(&dist_list.,&i.);
        data &tempData.(keep=y);
            retain n 0;
            set &castable.(where=(_SEVERITYMODEL_="&sevmodel" 
                %if &drawIdExists = 1 %then %do;
                    and _drawid_=0
                %end;
                )) end=lastobs;
            y = &samplevar;
            n = n + 1;
            if (lastobs) then do;
                call symputx('cntmodel', _countmodel_);
                call symputx('nobs', n);
            end;
        run;

	#if($pdfPlot=='1')
        ## Create PDF plot ##
		/* $pdfPlotMsg */
        proc sgrender data=&tempData. template=ETS.CDM.GRAPHICS.DensityPlot;
            dynamic title=$CTMUtil.doubleQuoteString($pdfTitle) 
		        title2=$CTMUtil.doubleQuoteString($pdfPlotTitle2Temp.replace("{1}", "&sevmodel").replace("{2}", "&cntmodel"))
				pdflabel=$CTMUtil.doubleQuoteString($pdfLabel)
	            VariableShortLbl="&samplevar" VariableLabel=$CTMUtil.doubleQuoteString($aggLossLabelTemp.replace("{1}", "&samplevar"))
	            showXeq0line="0" showHist="1" plotUnAdj="1" plotAdj="0";
        run;
	#end
	
	#if($edfPlot=='1')
        ## Prepare data that contains EDF and its confidence limits for unique values of aggregate loss ##
		/* $prepareEDFMsg */
        proc sort data=&tempData.;
            by y;
        run;
        data &tempData.(keep=y edf edflower edfupper);
            set &tempData.;
            retain eps z yprev;
            if _n_=1 then do;
                z = probit(1-&edfalpha./2);
                yprev = y;
                eps = constant('MACEPS');
            end;
            if (abs(y-yprev) > eps) then do;
                edf = _n_/&nobs;
                estd = sqrt(edf*(1-edf)/&nobs);
                edflower = MAX(0, edf-z*estd);
                edfupper = MIN(1, edf+z*estd);
                output;
            end;
        run;

        ## Create EDF plot ##
		/* $edfPlotMsg */
        %let cl = %SYSEVALF(100*(1-&edfalpha));

        proc sgrender data=&tempData. template=ETS.CDM.GRAPHICS.EDFPlot;
            dynamic title=$CTMUtil.doubleQuoteString($edfTitle)
		        title2=$CTMUtil.doubleQuoteString($edfPlotTitle2Temp.replace("{1}", "&sevmodel").replace("{2}", "&cntmodel"))
	            Variable="y" VariableShortLbl="&samplevar"
	            VariableLabel=$CTMUtil.doubleQuoteString($aggLossLabelTemp.replace("{1}", "&samplevar"))
	            EDFVariable="edf" EDFVariableLabel=$CTMUtil.doubleQuoteString($edfVarLabel)
	            edfLabel="EDF" isEdfStep="1" showEDFLimits="1"
	            EDFLowerVariable="edflower" EDFUpperVariable="edfupper"
	            edfCLLabel="EDF CL (&cl.%)";
        run;
	#end	
    %end;
    
	## Delete temporary data sets ##
	proc datasets library=work nolist nowarn;
		delete &tempData. &varlistdata.;
	quit;
%mend;

	#if($tmpcasNeeded=='1')
		%makeCDMPlots(castable=${tempCASLib}.tempSample, edfalpha=0.05);
	#else
		%makeCDMPlots(castable=$outputSampleName, edfalpha=0.05);
	#end

	## Clean Up
	#if($tmpcasNeeded=='1')
		proc delete data=${tempCASLib}.tempSample; run;
		libname _tmpcas_;
	#end
#end

]]>
	</CodeTemplate>
<TemplateValues version="7.3">
<![CDATA[
{"severity":{"librarytable":"CASUSER.PURE_PREMIUM"},"lossSeverity":"json:[{\"value\":\"avg_claim\",\"type\":\"Numeric\",\"length\":8,\"format\":\"\",\"informat\":\"\",\"className\":\"RoleObject\"}]","sevContinuousVar":"","sevClassVar":"","offsetVariable":"","leftCensorVariable":"","rightCensorVariable":"","leftTruncateVariable":"","rightTruncateVariable":"","count":{"librarytable":"CASUSER.PURE_PREMIUM"},"lossCount":"json:[{\"value\":\"num_claims\",\"type\":\"Numeric\",\"length\":8,\"format\":\"\",\"informat\":\"\",\"className\":\"RoleObject\"}]","countContinuousVar":"","countClassVar":"","input":{"librarytable":""},"lossCountInput":"","repId":"","sevModelData":{"librarytable":"PUBLIC.FINANCIAL_SERVICES"},"cntModelData":{"librarytable":"PUBLIC.FINANCIAL_SERVICES"},"newSev":"1","radioLossSevType":"newSev","existingSev":"0","sevContainRegressor":"0","externalCount":"0","radioLossCountType":"internalCount","internalCount":"1","newCount":"1","radioLossCntInternalType":"newCount","existingCount":"0","cntContainRegressor":"0","leftCensor":"0","leftCensorVarChoice":"1","leftCensorGrp":"leftCensorVarChoice","leftCensorValueChoice":"0","leftCensorValue":"","rightCensor":"0","rightCensorVarChoice":"1","rightCensorGrp":"rightCensorVarChoice","rightCensorValueChoice":"0","rightCensorValue":"","leftTruncate":"0","leftTruncateVarChoice":"1","leftTruncateGrp":"leftTruncateVarChoice","leftTruncateValueChoice":"0","leftTruncateValue":"","rightTruncate":"0","rightTruncateVarChoice":"1","rightTruncateGrp":"rightTruncateVarChoice","rightTruncateValueChoice":"0","rightTruncateValue":"","distributionList":[{"value":"logn","displayValue":"Lognormal","keys":["lognDistribution","logn","Lognormal"],"label":"Lognormal","baseid":"{\"value\":\"logn\",\"label\":\"Lognormal\"}","id":"{\"value\":\"logn\",\"label\":\"Lognormal\"}1"}],"sevMainModel":"1","radioSevModelType":"sevMainModel","sevAdvancedModel":"0","sevModelBuilder":{"modelSummaryValues":{"randomEffectsSetCount":0,"repeatedEffectsSetCount":0,"zeroInflatedEffectsSetCount":0,"zeroInflatedEffectsCount":0,"fixedEffectsCount":0,"fixedContinuousMainEffectsCount":0,"fixedClassificationMainEffectsCount":0,"fixedInterceptValue":null,"fixedModelsetInvalidStateCount":0,"randomModelsetInvalidStateCount":0,"repeatedModelsetInvalidStateCount":0,"meansModelsetInvalidStateCount":0,"zeroInflatedModelsetInvalidStateCount":0},"mixedEffectsModels":[{"emtype":"FIXED","intercept":null,"modelEffects":[]}]},"cntDistribution":[{"value":"poisson","displayValue":"Poisson","keys":["poisson",null,"Poisson"],"label":"Poisson","baseid":"{\"value\":\"poisson\",\"label\":\"Poisson\"}","id":"{\"value\":\"poisson\",\"label\":\"Poisson\"}1"}],"cntMainModel":"1","radioCntModelType":"cntMainModel","cntAdvancedModel":"0","cntModelBuilder":{"modelSummaryValues":{"randomEffectsSetCount":0,"repeatedEffectsSetCount":0,"zeroInflatedEffectsSetCount":0,"zeroInflatedEffectsCount":0,"fixedEffectsCount":0,"fixedContinuousMainEffectsCount":0,"fixedClassificationMainEffectsCount":0,"fixedInterceptValue":"True","fixedModelsetInvalidStateCount":0,"randomModelsetInvalidStateCount":0,"repeatedModelsetInvalidStateCount":0,"meansModelsetInvalidStateCount":0,"zeroInflatedModelsetInvalidStateCount":0},"mixedEffectsModels":[{"emtype":"FIXED","intercept":"True","modelEffects":[]}]},"cntZeroInflatedModelBuilder":{"modelSummaryValues":{"randomEffectsSetCount":0,"repeatedEffectsSetCount":0,"zeroInflatedEffectsSetCount":1,"zeroInflatedEffectsCount":0,"fixedEffectsCount":0,"fixedContinuousMainEffectsCount":0,"fixedClassificationMainEffectsCount":0,"fixedInterceptValue":"True","fixedModelsetInvalidStateCount":0,"randomModelsetInvalidStateCount":0,"repeatedModelsetInvalidStateCount":0,"meansModelsetInvalidStateCount":0,"zeroInflatedModelsetInvalidStateCount":0},"mixedEffectsModels":[{"emtype":"MEANS","intercept":"True","modelEffects":[]},{"emtype":"ZEROINFLATED","intercept":null,"modelEffects":[]}]},"logistic":"1","linkFuncGrp":"logistic","normal":"0","maxCount":10,"nReplicate":150000,"nReplicateExternal":1,"perturbation":"0","nPerturbedSamples":30,"statsChoice":[{"value":"defaultStatsChoice","displayValue":"Default statistics","keys":["defaultStatsChoice",null,"Default statistics"],"label":"Default statistics","baseid":"{\"value\":\"defaultStatsChoice\",\"label\":\"Default statistics\"}","id":"{\"value\":\"defaultStatsChoice\",\"label\":\"Default statistics\"}1"}],"summaryStats":"1","percentiles":"1","perturbSummary":"0","pdfPlot":"1","edfPlot":"1","procEconometrics":"1","proc":"procEconometrics","procCas":"0","outputSum":"0","outputSumName":{"value":"","cbSelected":false},"mean":"0","stdDev":"0","skewness":"0","kurtosis":"0","percentilesSumStat":"1","percentilesSelect":[{"value":"oneP","displayValue":"1st","keys":["oneP",null,"1st"],"label":"1st","baseid":"{\"value\":\"oneP\",\"label\":\"1st\"}","id":"{\"value\":\"oneP\",\"label\":\"1st\"}1"},{"value":"fiveP","displayValue":"5th","keys":["fiveP",null,"5th"],"label":"5th","baseid":"{\"value\":\"fiveP\",\"label\":\"5th\"}","id":"{\"value\":\"fiveP\",\"label\":\"5th\"}1"},{"value":"twentyFiveP","displayValue":"25th","keys":["twentyFiveP",null,"25th"],"label":"25th","baseid":"{\"value\":\"twentyFiveP\",\"label\":\"25th\"}","id":"{\"value\":\"twentyFiveP\",\"label\":\"25th\"}1"},{"value":"fiftyP","displayValue":"50th","keys":["fiftyP",null,"50th"],"label":"50th","baseid":"{\"value\":\"fiftyP\",\"label\":\"50th\"}","id":"{\"value\":\"fiftyP\",\"label\":\"50th\"}1"},{"value":"seventyFiveP","displayValue":"75th","keys":["seventyFiveP",null,"75th"],"label":"75th","baseid":"{\"value\":\"seventyFiveP\",\"label\":\"75th\"}","id":"{\"value\":\"seventyFiveP\",\"label\":\"75th\"}1"},{"value":"ninetyFiveP","displayValue":"95th","keys":["ninetyFiveP",null,"95th"],"label":"95th","baseid":"{\"value\":\"ninetyFiveP\",\"label\":\"95th\"}","id":"{\"value\":\"ninetyFiveP\",\"label\":\"95th\"}1"},{"value":"ninetyNineP","displayValue":"99th","keys":["ninetyNineP",null,"99th"],"label":"99th","baseid":"{\"value\":\"ninetyNineP\",\"label\":\"99th\"}","id":"{\"value\":\"ninetyNineP\",\"label\":\"99th\"}1"}],"outputSample":"0","outputSampleName":{"value":"","cbSelected":false},"outputDraw":"0","outputDrawName":{"value":"","cbSelected":false}}
]]>
</TemplateValues>

</Task>