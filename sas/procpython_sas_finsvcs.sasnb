[{"kind":2,"language":"sas","value":"/*########################\r\n  ### SAS Viya Session ###\r\n  ########################*/\r\n\r\ncas casauto sessopts=(caslib=casuser, metrics=true, timeout=1800);\r\nlibname cp cas caslib=casuser;\r\ncaslib _all_ assign;","outputs":[]},{"kind":2,"language":"sas","value":"/*###########################\r\n  ### Set Macro Variables ###\r\n  ###########################*/\r\n  \r\n%let in_mem_tbl = 'financial_services_prep';\r\n%let caslib_ref = 'public';\r\n%let model_name = 'gbtree_finsvcs';\r\n%let libname_in_mem_tbl = public.financial_services_prep;\r\n%let target = 'event_indicator';\r\n%let predictedtarget = 'P_event_indicator1';\r\n%let excluded_cols = {\"event_indicator\", \"analytic_partition\", \"account_id\",\r\n\t\t\"id_important_activity\", \"id_direct_contact\", \"id_current_fs_relationship\"};\r\n%let astore_tbl = &model_name || '_astore';\r\n%let model_tbl = &model_name || '_model';\r\n%let score_tbl = &model_name || '_score';\r\n%let scorecode_tbl = &model_name || '_scorecode';\r\n%let assess_tbl = &model_name || '_assess';\r\n%let assess_roc_tbl = &model_name || '_assess_roc';","outputs":[]},{"kind":1,"language":"markdown","value":"### CAS Actions ###","outputs":[]},{"kind":2,"language":"sas","value":"/*#############################\r\n  ### Identify Table in CAS ###\r\n  #############################*/\r\n\r\nproc cas;\r\n\t\ttable.tableExists result=code /\r\n\t\t\tcaslib=&caslib_ref, name=&in_mem_tbl;\r\n\t\t\tif code['exists'] <= 0 then do;\r\n\t\t\t\ttable.loadTable /\r\n\t\t\t\t\tcaslib=&caslib_ref,\r\n\t\t\t\t\tpath=cats(&in_mem_tbl,'.sashdat'),\r\n\t\t\t\t\tcasout={caslib=&caslib_ref,\r\n\t\t\t\t\t\tname=&in_mem_tbl,\r\n\t\t\t\t\t\tpromote=TRUE};\r\n\t\t\tend;\r\n\t\ttable.columnInfo result=col_list /\r\n\t\t\ttable={caslib=&caslib_ref, name=&in_mem_tbl};\r\n\t\t\tdescribe col_list;\r\n\t\t\tprint col_list.ColumnInfo[,'Column'];\r\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"/*########################\r\n  ### Model Parameters ###\r\n  ########################*/\r\n\r\nproc cas;\r\n\ttable.columnInfo result=C /\r\n\t\ttable={caslib=&caslib_ref, name=&in_mem_tbl};\r\n\t\tinputs = C.ColumnInfo[,'Column'];\r\n\t\tinputs = inputs - &excluded_cols;\r\n\tdecisionTree.gbtreeTrain /\r\n\t\ttable={caslib=&caslib_ref, name=&in_mem_tbl}\r\n\t\ttarget=&target\r\n\t\tinputs=inputs\r\n\t\tencodeName=TRUE\r\n\t\tnominals={&target}\r\n\t\tm=20\r\n\t\tseed=12345\r\n\t\tnTree=100\r\n\t\tlearningRate=0.1\r\n\t\tsubSampleRate=0.5\r\n\t\tlasso=0\r\n\t\tridge=1\r\n\t\tdistribution=\"binary\"\r\n\t\tmaxBranch=2\r\n\t\tmaxLevel=5\r\n\t\tleafSize=5\r\n\t\tmissing=\"useinsearch\"\r\n\t\tminUseInSearch=1\r\n\t\tnBins=50\r\n\t\tquantileBin=TRUE\r\n\t\tearlyStop={metric=\"MCR\", stagnation=5, tolerance=0, minimum=FALSE,\r\n\t\t\t\t\tthreshold=0, thresholdIter=0}\r\n\t\tcasOut={name=&model_tbl, replace=True}\r\n\t\tsaveState={name=&astore_tbl, replace=True}\r\n    \t;\r\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"/*########################\r\n  ### Write Score Code ###\r\n  ########################*/\r\n\r\nproc cas;\r\n\r\n\tdecisionTree.gbtreeCode /\r\n\t\tmodelTable={name=&model_tbl}\r\n\t\tcode={casOut={name=&scorecode_tbl, replace=True, promote=False}}\r\n\t;\r\nrun;\r\n\r\n/*########################\r\n  ###   Score Model    ###\r\n  ########################*/\r\n\r\nproc cas;\r\n\r\n\tdecisionTree.gbtreeScore /\r\n\t\tmodelTable={name=&model_tbl}\r\n\t\ttable={caslib=&caslib_ref, name=&in_mem_tbl}\r\n\t\tcasOut={name=&score_tbl, replace=True}\r\n\t\tcopyVars={&target}\r\n\t\tencodeName=TRUE\r\n\t\tassessOneRow=TRUE\r\n\t;\r\nrun;\r\n\r\n/*########################\r\n  ###   Assess Model   ###\r\n  ########################*/\r\n\r\nproc cas;\r\n\tpercentile.assess /\r\n\t\ttable={name=&score_tbl}\r\n\t\tevent=\"1\"\r\n\t\tresponse=&target\r\n\t\tinputs=&predictedtarget\r\n\t\tcutStep=0.001\r\n\t\tcasOut={name=&assess_tbl, replace=True}\r\n\t;\r\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"proc cas;\r\n\tdataStep.runCode /\r\n\t\tcode = \"data test;\r\n\t\t\t\tset casuser.gbtree_finsvcs_assess_roc;\r\n\t\t\t\tif _KS_ = 1;\r\n\t\t\t\trun;\";\r\nrun;\r\n\r\n/* _KS2_ is the highest KS given cutSteps */\r\nproc print data=cp.test;\r\nrun;\r\n\r\nproc cas;\r\n\t\ttable.tableExists result=code /\r\n\t\t\tcaslib=&caslib_ref, name=&assess_roc_tbl;\r\n\t\t\tif code['exists'] = 0 then do;\r\n\t\t\tprint \"The CAS table does not exist\";\r\n\t\t\tend;\r\n\r\n\t\t\tif code['exists'] = 1 then do;\r\n\t\t\tprint \"The CAS table has a session scope\";\r\n\t\t\tend;\r\n\r\n\t\t\tif code['exists'] = 2 then do;\r\n\t\t\tprint \"The CAS table has a global scope\";\r\n\t\t\tend;\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"### Python Code ###","outputs":[]},{"kind":2,"language":"python","value":"###################\r\n### Environment ###\r\n###################\r\n\r\nimport swat\r\nimport pandas as pd","outputs":[]},{"kind":2,"language":"python","value":"#############################\r\n### Identify Table in CAS ###\r\n#############################\r\n\r\n### caslib and table to use in modeling\r\ncaslib = 'Public'\r\nin_mem_tbl = 'FINANCIAL_SERVICES_PREP'\r\ndm_inputdf = SAS.sd2df(str(caslib)+str('.')+str(in_mem_tbl))\r\n\r\n### print columns for review of model parameters\r\nprint(dm_inputdf.dtypes)","outputs":[]},{"kind":2,"language":"python","value":"###############################\r\n### Python Model Parameters ###\r\n###############################\r\n\r\n# import python libraries\r\nimport numpy as np\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.metrics import classification_report, confusion_matrix\r\nfrom sklearn.utils import shuffle\r\n\r\n### model arugments\r\nlogit_params = {\r\n             'penalty': 'l2', \r\n             'dual': False, \r\n             'tol': 0.0001, \r\n             'fit_intercept': True, \r\n             'intercept_scaling': 1, \r\n             'class_weight': None, \r\n             'random_state': None, \r\n             'solver': 'newton-cg', \r\n             'max_iter': 100, \r\n             'multi_class': 'auto', \r\n             'verbose': 0, \r\n             'warm_start': False, \r\n             'n_jobs': None, \r\n             'l1_ratio': None\r\n             } \r\n\r\n### model manager information\r\nmodel_name = 'logit_python_finsvcs_SASStudio'\r\nproject_name = 'Financial Services'\r\ndescription = 'Logit Python'\r\nmodel_type = 'logistic_regression'\r\npredict_syntax = 'predict_proba'\r\n\r\n### define macro variables for model\r\ndm_dec_target = 'event_indicator'\r\ndm_partitionvar = 'analytic_partition'\r\ncreate_new_partition = 'no' # 'yes', 'no'\r\ndm_key = 'account_id' \r\ndm_classtarget_level = ['0', '1']\r\ndm_partition_validate_val, dm_partition_train_val, dm_partition_test_val = [0, 1, 2]\r\ndm_partition_validate_perc, dm_partition_train_perc, dm_partition_test_perc = [0.3, 0.6, 0.1]\r\n\r\n### create list of regressors\r\nkeep_predictors = [\r\n    'net_worth',\r\n    'credit_score',\r\n    'num_dependents',\r\n    'at_current_job_1_year',\r\n    'credit_history_mos',\r\n    'job_in_education',\r\n    'num_transactions',\r\n    'debt_to_income',\r\n    'amount',\r\n    'gender',\r\n    'age',\r\n    'job_in_hospitality'\r\n    ]\r\n#rejected_predictors = []\r\n\r\n### create partition column, if not already in dataset\r\nif create_new_partition == 'yes':\r\n    dm_inputdf = shuffle(dm_inputdf)\r\n    dm_inputdf.reset_index(inplace=True, drop=True)\r\n    validate_rows = round(len(dm_inputdf)*dm_partition_validate_perc)\r\n    train_rows = round(len(dm_inputdf)*dm_partition_train_perc) + validate_rows\r\n    test_rows = len(dm_inputdf)-train_rows\r\n    dm_inputdf.loc[0:validate_rows,dm_partitionvar] = dm_partition_validate_val\r\n    dm_inputdf.loc[validate_rows:train_rows,dm_partitionvar] = dm_partition_train_val\r\n    dm_inputdf.loc[train_rows:,dm_partitionvar] = dm_partition_test_val\r\n    \r\n##############################\r\n### Final Modeling Columns ###\r\n##############################\r\n\r\n### remove added index column in Model Studio\r\n#dm_inputdf.drop('_dmIndex_', axis=1, inplace=True)\r\n\r\n### create list of model variables\r\ndm_input = list(dm_inputdf.columns.values)\r\nmacro_vars = (dm_dec_target + ' ' + dm_partitionvar + ' ' + dm_key).split()\r\nrejected_predictors = [i for i in dm_input if i not in keep_predictors]\r\nrejected_vars = rejected_predictors # + macro_vars (include macro_vars if rejected_predictors are explicitly listed - not contra keep_predictors)\r\nfor i in rejected_vars:\r\n    dm_input.remove(i)\r\nprint(dm_input)\r\n\r\n### create prediction variables\r\ndm_predictionvar = [str('P_') + dm_dec_target + dm_classtarget_level[0], str('P_') + dm_dec_target + dm_classtarget_level[1]]\r\ndm_classtarget_intovar = str('I_') + dm_dec_target\r\n\r\n##################\r\n### Data Split ###\r\n##################\r\n\r\n### create train, test, validate datasets using existing partition column\r\ndm_traindf = dm_inputdf[dm_inputdf[dm_partitionvar] == dm_partition_train_val]\r\nX_train = dm_traindf.loc[:, dm_input]\r\ny_train = dm_traindf[dm_dec_target]\r\ndm_testdf = dm_inputdf.loc[(dm_inputdf[dm_partitionvar] == dm_partition_test_val)]\r\nX_test = dm_testdf.loc[:, dm_input]\r\ny_test = dm_testdf[dm_dec_target]\r\ndm_validdf = dm_inputdf.loc[(dm_inputdf[dm_partitionvar] == dm_partition_validate_val)]\r\nX_valid = dm_validdf.loc[:, dm_input]\r\ny_valid = dm_validdf[dm_dec_target]\r\n","outputs":[]},{"kind":2,"language":"python","value":"############################\r\n### Python Training Code ###\r\n############################\r\n\r\n### estimate & fit model\r\ndm_model = LogisticRegression(**logit_params)\r\ndm_model.fit(X_train, y_train)\r\n\r\n### score full data\r\nfullX = dm_inputdf.loc[:, dm_input]\r\nfully = dm_inputdf[dm_dec_target]\r\ndm_scoreddf_prob = pd.DataFrame(dm_model.predict_proba(fullX), columns=dm_predictionvar)\r\ndm_scoreddf_class = pd.DataFrame(dm_model.predict(fullX), columns=[dm_classtarget_intovar])\r\ndm_scoreddf = pd.concat([dm_scoreddf_prob, dm_scoreddf_class], axis=1)\r\n\r\n### create tables with predicted values\r\ntrainProba = dm_model.predict_proba(X_train)\r\ntestProba = dm_model.predict_proba(X_test)\r\nvalidProba = dm_model.predict_proba(X_valid)\r\ntrainData = pd.concat([y_train.reset_index(drop=True), pd.Series(data=trainProba[:,1])], axis=1)\r\ntestData = pd.concat([y_test.reset_index(drop=True), pd.Series(data=testProba[:,1])], axis=1)\r\nvalidData = pd.concat([y_valid.reset_index(drop=True), pd.Series(data=validProba[:,1])], axis=1)","outputs":[]},{"kind":2,"language":"python","value":"##################################\r\n### PRINT PYTHON MODEL RESULTS ###\r\n##################################\r\n\r\npredictions = dm_model.predict(X_test)\r\ncols = X_train.columns\r\npredictors = np.array(cols)\r\ntn, fp, fn, tp = confusion_matrix(y_test, predictions).ravel()\r\nprint(description)\r\nprint('model_parameters')\r\nprint(dm_model)\r\nprint(' ')\r\nprint('model_performance')\r\nprint('score_test:', dm_model.score(X_test, y_test))\r\nprint('score_valid:', dm_model.score(X_valid, y_valid))\r\nprint('confusion_matrix:')\r\nprint('(tn, fp, fn, tp)')\r\nprint((tn, fp, fn, tp))\r\nprint('classification_report:')\r\nprint(classification_report(y_test, predictions))\r\nif model_type == 'logistic_regression':\r\n    orat = np.exp(dm_model.coef_, out=None)\r\n    c1 = np.vstack([predictors,orat])\r\n    c2 = np.transpose(c1)\r\n    c3 = pd.DataFrame(c2, columns=['predictors', 'odds_ratio'])\r\n    print('intercept:')\r\n    print(dm_model.intercept_)\r\n    print('odds_ratios:')\r\n    print(c3)","outputs":[]}]